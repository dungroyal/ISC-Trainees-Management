[{"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\index.js":"1","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\App.js":"2","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\DefaultLayout.jsx":"3","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Footer.jsx":"4","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Body.jsx":"5","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Header.jsx":"6","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\routes.js":"7","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\student.jsx":"8","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentService.js":"9","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\intakeService.js":"10","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\universityService.js":"11","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\companyService.js":"12","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\api.js":"13","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentIntakeService.js":"14","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentCompanyService.js":"15","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\input.jsx":"16","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\paginationStudent.jsx":"17","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\searchStudent.jsx":"18","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\SideBar\\SideBar.jsx":"19","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Auth\\login.jsx":"20","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\intake.jsx":"21","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\major.jsx":"22","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\majorService.js":"23","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\paginationIntake.jsx":"24","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\searchIntake.jsx":"25","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\searchMajor.jsx":"26","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\paginationMajor.jsx":"27","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\University\\university.jsx":"28","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Company\\company.jsx":"29","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Room\\room.jsx":"30","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\pagination.jsx":"31","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\select.jsx":"32","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\roomService.js":"33","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\jobTitleService.js":"34","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\subject.jsx":"35","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\subjectService.js":"36","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\paginationSubject.jsx":"37","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\searchSubject.jsx":"38","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Dashboard\\dashboard.jsx":"39","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Assets\\js\\app.js":"40","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Lecturer\\lecturer.jsx":"41","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Lecturer\\searchLecturer.jsx":"42","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Input.jsx":"43","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\lecturerService.js":"44","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\userService.js":"45","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\actions.js":"46","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\store.js":"47","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\reducers\\auth.js":"48"},{"size":945,"mtime":1610376160182,"results":"49","hashOfConfig":"50"},{"size":405,"mtime":1610376294261,"results":"51","hashOfConfig":"50"},{"size":860,"mtime":1610378923922,"results":"52","hashOfConfig":"50"},{"size":483,"mtime":1608282182531,"results":"53","hashOfConfig":"50"},{"size":955,"mtime":1610376304058,"results":"54","hashOfConfig":"50"},{"size":7845,"mtime":1610379905147,"results":"55","hashOfConfig":"50"},{"size":1113,"mtime":1610378990892,"results":"56","hashOfConfig":"50"},{"size":34851,"mtime":1610380031519,"results":"57","hashOfConfig":"50"},{"size":3609,"mtime":1610220262792,"results":"58","hashOfConfig":"50"},{"size":1463,"mtime":1610191563681,"results":"59","hashOfConfig":"50"},{"size":866,"mtime":1610099600903,"results":"60","hashOfConfig":"50"},{"size":845,"mtime":1609167630636,"results":"61","hashOfConfig":"50"},{"size":4895,"mtime":1610380505364,"results":"62","hashOfConfig":"50"},{"size":863,"mtime":1609145802776,"results":"63","hashOfConfig":"50"},{"size":264,"mtime":1608656612989,"results":"64","hashOfConfig":"50"},{"size":4139,"mtime":1610272269008,"results":"65","hashOfConfig":"50"},{"size":1928,"mtime":1610101591116,"results":"66","hashOfConfig":"50"},{"size":1024,"mtime":1609067964187,"results":"67","hashOfConfig":"50"},{"size":1715,"mtime":1610378917504,"results":"68","hashOfConfig":"50"},{"size":6300,"mtime":1610379363933,"results":"69","hashOfConfig":"50"},{"size":20057,"mtime":1610215045840,"results":"70","hashOfConfig":"50"},{"size":15194,"mtime":1610302486077,"results":"71","hashOfConfig":"50"},{"size":1798,"mtime":1610031869695,"results":"72","hashOfConfig":"50"},{"size":2187,"mtime":1609855410000,"results":"73","hashOfConfig":"50"},{"size":976,"mtime":1609855438000,"results":"74","hashOfConfig":"50"},{"size":972,"mtime":1609911043000,"results":"75","hashOfConfig":"50"},{"size":2186,"mtime":1609910994000,"results":"76","hashOfConfig":"50"},{"size":15142,"mtime":1610299802446,"results":"77","hashOfConfig":"50"},{"size":16916,"mtime":1610302868780,"results":"78","hashOfConfig":"50"},{"size":17953,"mtime":1610303859805,"results":"79","hashOfConfig":"50"},{"size":2348,"mtime":1610284328456,"results":"80","hashOfConfig":"50"},{"size":4529,"mtime":1609912859976,"results":"81","hashOfConfig":"50"},{"size":816,"mtime":1609166381440,"results":"82","hashOfConfig":"50"},{"size":850,"mtime":1609166777630,"results":"83","hashOfConfig":"50"},{"size":14917,"mtime":1610303107994,"results":"84","hashOfConfig":"50"},{"size":849,"mtime":1609670712000,"results":"85","hashOfConfig":"50"},{"size":1868,"mtime":1609670712000,"results":"86","hashOfConfig":"50"},{"size":1024,"mtime":1609670712000,"results":"87","hashOfConfig":"50"},{"size":18151,"mtime":1610382250075,"results":"88","hashOfConfig":"50"},{"size":5883,"mtime":1608283205686,"results":"89","hashOfConfig":"50"},{"size":17868,"mtime":1610302187863,"results":"90","hashOfConfig":"50"},{"size":922,"mtime":1610300601781,"results":"91","hashOfConfig":"50"},{"size":1149,"mtime":1610272300499,"results":"92","hashOfConfig":"50"},{"size":3598,"mtime":1610376773539,"results":"93","hashOfConfig":"50"},{"size":316,"mtime":1610376917788,"results":"94","hashOfConfig":"50"},{"size":115,"mtime":1610263418606,"results":"95","hashOfConfig":"50"},{"size":229,"mtime":1610263418620,"results":"96","hashOfConfig":"50"},{"size":1249,"mtime":1610265546737,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1sbefy5",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"106"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"106"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"106"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"106"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"106"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"106"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"106"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"106"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"106"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"106"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"106"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"106"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"106"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"106"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"106"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"106"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"106"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\index.js",["212"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\App.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\DefaultLayout.jsx",["213","214","215"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Footer.jsx",[],["216","217"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Body.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Header.jsx",["218","219","220","221","222","223","224","225"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\routes.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\student.jsx",["226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267","268","269"],"import React, { useState, Fragment, useEffect } from \"react\";\r\nimport $, { map } from 'jquery';\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { confirmAlert } from 'react-confirm-alert';\r\nimport 'react-confirm-alert/src/react-confirm-alert.css';\r\nimport queryString from 'query-string';\r\nimport Select from 'react-select';\r\nimport Input from \"../../Controls/input\";\r\nimport studentService from \"../../Services/studentService\";\r\nimport univerService from \"../../Services/universityService\";\r\nimport companyService from \"../../Services/companyService\";\r\nimport intakeService from \"../../Services/intakeService\";\r\nimport api from \"../../Services/api\";\r\nimport \"./student.css\";\r\nimport studentCompanyService from \"../../Services/studentCompanyService\";\r\nimport studentIntakeService from \"../../Services/studentIntakeService\";\r\nimport {toast} from 'react-toastify';  \r\nimport Pagination from './paginationStudent';\r\nimport SearchStudent from './searchStudent';\r\n\r\nconst Student = (props) => {\r\n  //Test\r\n  const test = [];\r\n  const test2 = [];\r\n  // Upload Filet\r\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n  const [currentFile, setCurrentFile] = useState(undefined);\r\n  const [progress, setProgress] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [fileInfos, setFileInfos] = useState([]);\r\n  const selectFile = (event) => {\r\n    setSelectedFiles(event.target.files);\r\n  };\r\n  // Get One university\r\n  const [oneUniver, setOneUniver] = useState();\r\n  const showOneUniver = (id) => {\r\n    univerService.get(id).then((res) => {\r\n      setOneUniver(res.data);\r\n    });\r\n  };\r\n  // Option For MultiCheckBox Type Student\r\n  const optionsTypeStu = [\r\n    { label: \"Studying\", value: \"Studying\" },\r\n    { label: \"Graduate\", value: \"Graduate\" },\r\n    { label: \"Reserve\", value: \"Reserve\" },\r\n  ];\r\n  const [selectedTypeStu, setSelectedTypeStu] = useState({ label: \"Studying\", value: \"Studying\"});\r\n\r\n  // Custom Select OneMultiSelect Type Student\r\n  for (var i = 0; i < optionsTypeStu.length; i++) {\r\n    if (selectedTypeStu.length >= 1) {\r\n      optionsTypeStu[i].disabled = true;\r\n    }\r\n  }\r\n\r\n  // Option For MultiCheckBox University\r\n  const [selectedUniver, setSelectedUniver] = useState();\r\n  const [univers, setUniver] = useState([]);\r\n\r\n  // Option For MultiCheckBox Company\r\n  const [selectedCompany, setSelectedCompany] = useState([]);\r\n  const [companies, setCompanies] = useState([]);\r\n\r\n  // Option For MultiCheckBox Intake\r\n  const [selectedIntake, setSelectedIntake] = useState([]);\r\n  const [intakes, setIntakes] = useState([]);\r\n\r\n  //Option For MultiCheckBox Working Status\r\n  const optionsWorkingStatus = [\r\n    { label: \"Active\", value: \"Active\"},\r\n    { label: \"Inactive\", value: \"Inactive\"},\r\n  ];\r\n  const [selectedWorkingStatus, setSelectedWorkingStatus] = useState({ label: \"Inactive\", value: \"Inactive\"});\r\n\r\n  // Custom Select OneMultiSelect Type Student\r\n  for (var i = 0; i < optionsWorkingStatus.length; i++) {\r\n    if (selectedWorkingStatus.length >= 1) {\r\n      optionsWorkingStatus[i].disabled = true;\r\n    }\r\n  }\r\n\r\n  \r\n  //[] Student Intake ID\r\n  const [allStudentIntake, setAllStudentIntake] = useState([]);\r\n  const [studentIntakeId, setStudentIntakeId] = useState([]);\r\n  const [showIntakes, setshowIntakes] = useState([]);\r\n\r\n  const [modalUpdate, setModalUpdate] = useState(false);\r\n  \r\n  // Formik\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      codeStu: \"\",\r\n      lastName: \"\",\r\n      firstName: \"\",\r\n      emailStu: \"\",\r\n      gpa: \"\",\r\n      phoneStu: \"\",\r\n      addressStu: \"\",\r\n      createdBy: \"Admin\",\r\n      updatedBy:\"Admin\",\r\n      noteStu: \"\",\r\n      image: \"\",\r\n      typeStudent: { label: \"Studying\", value: \"Studying\" },\r\n      workingStatus: { label: \"Inactive\", value: \"Inactive\"},\r\n      university: \"\",\r\n      intake: \"\",\r\n      updateIntake: [{label: 'fake', values: 'fake'}],\r\n    },\r\n    validationSchema: Yup.object({\r\n      codeStu: Yup.string()\r\n        .required(\"Required\")\r\n        .min(2, \"Up to 255 characters\").max(255,\"Max 255 characters\"),\r\n      lastName: Yup.string()\r\n        .required(\"Required\")\r\n        .min(2, \"Up to 200 characters\").max(255,\"Max 255 characters\"),\r\n      firstName: Yup.string()\r\n        .required(\"Required\")\r\n        .min(2, \"Up to 255 characters\").max(255,\"Max 255 characters\"),\r\n      emailStu: Yup.string().email().required(\"Required\").min(2, \"Up to 200 characters\").max(255,\"Max 255 characters\"),\r\n      gpa: Yup.number().required(\"Required\"),\r\n      phoneStu: Yup.string().required(\"Required\").min(2, \"Up to 200 characters\"),\r\n      addressStu: Yup.string().required(\"Required\").min(2, \"Up to 255 characters\"),\r\n      noteStu: Yup.string().min(2, \"Up to 2000 characters\").max(2000,\"Max 2000 characters\"),\r\n      intake: Yup.object().required(\"Required\"),\r\n      updateIntake: Yup.array().required(\"Required\"),\r\n      university: Yup.object().required(\"Required\"),\r\n      image: Yup.mixed()\r\n      .required(\"required\")\r\n      .test(\r\n        \"fileSize\",\r\n        \"too large (<2Mb)\",\r\n        value => value && value.size <= 2000000 //2MB\r\n      )\r\n      .test(\r\n        \"fileFormat\",\r\n        \"unsupported Format\",\r\n        value => value && [\r\n          \"image/jpg\",\r\n          \"image/jpeg\",\r\n          \"image/gif\",\r\n          \"image/png\"\r\n        ].includes(value.type)\r\n      ),\r\n    }),\r\n    onSubmit: (values) => {\r\n      console.log(\"formik: \",values);\r\n      handleFormSubmit(values);\r\n    },\r\n  }); \r\n\r\n  // Student\r\n  const [students, setStudent] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const handleModalClose = () => setModalShow(false);\r\n\r\n  const [pagination, setPagination] = useState({\r\n    page:0,\r\n    size:4,\r\n    totalRows: 1\r\n  });\r\n\r\n  const [filters, setFilters] = useState({\r\n    page: 0,\r\n    size: 4,\r\n    sort: 'ASC',\r\n    typeStudent: 'n',\r\n    search: '',\r\n  });\r\n  \r\n  const handlePageChange = (newPage) => {\r\n    setFilters({\r\n      ...filters,\r\n      page: newPage,\r\n    })\r\n  };\r\n\r\n  const handedSearchChange = (newSearch) => {\r\n    setFilters({\r\n      ...filters,\r\n      page: 0,\r\n      search: newSearch.searchTerm,\r\n    })\r\n  };\r\n\r\n  // Load Data\r\n  const loadData = () => {\r\n    //Get Student with Filters\r\n    const paramsFilters = queryString.stringify(filters);\r\n      studentService.paginationStudent(paramsFilters).then((res) => {\r\n        const totalRows = res.data[0].totalElements;\r\n        const size = res.data[0].size;\r\n        const pageCurrent = res.data[0].pageable.pageNumber;\r\n        if (res.status === 0) {\r\n          setStudent(res.data[0].content);\r\n          setPagination({\r\n            page: pageCurrent,\r\n            size: size,\r\n            totalRows: totalRows,\r\n          })\r\n        }\r\n      });\r\n\r\n    //Get all company\r\n    companyService.getAll().then((res) => {\r\n      if (res.status === 0) {\r\n        setCompanies(res.data);\r\n      }\r\n    });\r\n\r\n    //Get all university\r\n    univerService.getAll().then((res) => {\r\n      if (res.status === 0) {\r\n        setUniver(res.data);\r\n      }\r\n    });\r\n    // Get all intake\r\n    intakeService.getAll().then((res) => {\r\n      if (res.status === 0) {\r\n        setIntakes(res.data);\r\n        setshowIntakes(res.data);\r\n      }\r\n    });\r\n\r\n     // Get all Student Intake\r\n     studentIntakeService.getAll().then((res) => {\r\n      if (res.status === 0) {\r\n        setAllStudentIntake(res.data);\r\n      }\r\n    });\r\n  };\r\n\r\n  //Didmount load data major\r\n  useEffect(() => {\r\n    loadData();\r\n    document.title = \"Students - ISC Quang Trung Management\";\r\n  }, [filters]);\r\n\r\n  //Update Student State\r\n  const [studentId, setStudentId] = useState(0);\r\n  //Check Form Update And Add Student\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) e.preventDefault();\r\n    setStudentId(dataId);\r\n\r\n    if (dataId > 0) {\r\n      setModalUpdate(true);\r\n      studentService.get(dataId).then((res) => {\r\n        setModalShow(true);\r\n        const studentById = res.data[0];\r\n        formik.setValues(studentById);\r\n        formik.setFieldValue('typeStudent',{ label: studentById.typeStu, value: studentById.typeStu})\r\n        formik.setFieldValue('workingStatus',{ label: studentById.workingStatus, value: studentById.workingStatus})\r\n        formik.setFieldValue('university',{value: studentById.university.id,label: studentById.university.nameUni})\r\n        formik.setFieldValue('intake',{label:'fake', values: 'fake'})\r\n        formik.setFieldValue('updateIntake',[{label:'fake', values: 'fake'}])\r\n        formik.setFieldValue('oldImage',studentById.image)\r\n        formik.setFieldValue('image', {name: \"fake_image\", size: 1, type: \"image/png\"})\r\n        setSelectedIntake([]);\r\n        for (let i = 0; i < allStudentIntake.length; i++) {\r\n          if (allStudentIntake[i].id.studentId == dataId) {\r\n            for (let j = 0; j < intakes.length; j++) {\r\n              if (intakes[j].id == allStudentIntake[i].id.intakeId) {\r\n                setSelectedIntake(oldArray => [...oldArray, {label:intakes[j].nameIntake , value:allStudentIntake[i].id.intakeId }]);\r\n              }\r\n            }\r\n            \r\n          }          \r\n        }\r\n      });\r\n    } else {\r\n      setModalUpdate(false);\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const confirmDeleteStudent = (e, studentId) => {\r\n    if (e) e.preventDefault();\r\n    confirmAlert({\r\n      title: 'Confirm to submit',\r\n      message: 'Do you want to delete this student?',\r\n      buttons: [\r\n        {\r\n          label: 'Yes',\r\n          onClick: () => handleDeleteStudent(studentId)\r\n        },\r\n        {\r\n          label: 'No'\r\n        }\r\n      ]\r\n    });\r\n  };\r\n\r\n  //Delete new Student\r\n  const handleDeleteStudent = (studentId) => {\r\n    studentIntakeService.get(studentId).then((res) => {\r\n      const listIntaked = res.data;\r\n      for (let d = 0; d <= listIntaked.length; d++) {\r\n        if(d < listIntaked.length){\r\n          studentIntakeService.remove(studentId,listIntaked[d].id.intakeId).then((res) => {\r\n            if (res.status === 1) {\r\n              console.error(\"Delete Student Intake error : \" +res.status);\r\n            }\r\n          });\r\n        }else{\r\n          studentService.remove(studentId).then((res) => {\r\n            if (res.status === 0) {\r\n              toast.success(\"Delete Student Success\");\r\n              loadData();\r\n            } else {\r\n              toast.error(res.message);\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  //Add new Student\r\n  const handleFormSubmit = () => {\r\n    if (studentId === 0) {\r\n      studentService\r\n        .add1(\r\n          formik.values.firstName,\r\n          formik.values.lastName,\r\n          formik.values.codeStu,\r\n          formik.values.addressStu,\r\n          formik.values.phoneStu,\r\n          formik.values.emailStu,\r\n          formik.values.typeStudent.value,\r\n          formik.values.gpa,\r\n          formik.values.workingStatus.value,\r\n          formik.values.noteStu,\r\n          formik.values.image,\r\n          \"Admin\",\r\n          formik.values.university.value,\r\n        )\r\n        .then((stu) => {\r\n          if (stu.status === 0) {\r\n            const studentId = stu.data[0].id;\r\n            const intakeId = formik.values.intake.value;\r\n            studentIntakeService\r\n              .add(studentId, intakeId)\r\n                .then((stuIntake) => {\r\n                  if (stuIntake.status === 0){\r\n                    toast.success('Add new student success');\r\n                    loadData();\r\n                    handleModalClose();\r\n                  }else{\r\n                    toast.error('Add student error, '+ stuIntake.message);\r\n                  }\r\n                });\r\n          }else{\r\n            if (stu.message == \"Duplicate Email Student\") {\r\n              formik.setFieldError('emailStu',stu.message);\r\n            }\r\n            if(stu.message == \"Required request part 'image' is not present\"){\r\n              formik.setFieldError('image',stu.message);\r\n            }\r\n            if(stu.message == \"Duplicate Student Code\"){\r\n              formik.setFieldError('codeStu',stu.message);\r\n            }\r\n          }\r\n        });\r\n    } else {\r\n      if (formik.values.image.name === \"fake_image\") {\r\n        studentService\r\n        .updateNoImages(\r\n          studentId,\r\n          formik.values.firstName,\r\n          formik.values.lastName,\r\n          formik.values.codeStu,\r\n          formik.values.addressStu,\r\n          formik.values.phoneStu,\r\n          formik.values.emailStu,\r\n          formik.values.typeStudent.value,\r\n          formik.values.gpa,\r\n          formik.values.workingStatus.value,\r\n          formik.values.noteStu,\r\n          \"Admin\",\r\n          formik.values.university.value,\r\n        )\r\n        .then((res) => {\r\n          const studentId = res.data[0].id;\r\n            studentIntakeService.get(studentId).then((res) => {\r\n            const arrayIntaked = Object.keys(res.data).map(function(k){return res.data[k].id.intakeId}).join(\",\");\r\n            const arrayNewIntake =  Object.keys(selectedIntake).map(function(k){return selectedIntake[k].value}).join(\",\");\r\n              studentIntakeService.updateIntakeOfStuArray(arrayNewIntake,studentId,arrayIntaked).then((res) => {\r\n                if (res.status === 0) {\r\n                  toast.success(\"Update Success\");\r\n                  console.info(\"Update Student-Intake success\");\r\n                  loadData();\r\n                  handleModalClose();\r\n                } else {\r\n                  toast.error(\"Update Student-Intake error :(\");\r\n                }\r\n              });\r\n          });\r\n        }).catch((error) => {\r\n          console.error(error);\r\n        });\r\n      }else{\r\n        studentService\r\n        .updateHasImages(\r\n          studentId,\r\n          formik.values.firstName,\r\n          formik.values.lastName,\r\n          formik.values.codeStu,\r\n          formik.values.addressStu,\r\n          formik.values.phoneStu,\r\n          formik.values.emailStu,\r\n          formik.values.typeStudent.value,\r\n          formik.values.gpa,\r\n          formik.values.workingStatus.value,\r\n          formik.values.noteStu,\r\n          formik.values.image,\r\n          \"Admin\",\r\n          formik.values.university.value,\r\n        )\r\n        .then((res) => {\r\n          const studentId = res.data[0].id;\r\n            studentIntakeService.get(studentId).then((res) => {\r\n            const arrayIntaked = Object.keys(res.data).map(function(k){return res.data[k].id.intakeId}).join(\",\");\r\n            const arrayNewIntake =  Object.keys(selectedIntake).map(function(k){return selectedIntake[k].value}).join(\",\");\r\n              studentIntakeService.updateIntakeOfStuArray(arrayNewIntake,studentId,arrayIntaked).then((res) => {\r\n                if (res.status === 0) {\r\n                  toast.success(\"Update Success\");\r\n                  console.info(\"Update Student-Intake success\");\r\n                  loadData();\r\n                  handleModalClose();\r\n                } else {\r\n                  toast.error(\"Update Student-Intake error :(\");\r\n                }\r\n              });\r\n          });\r\n        }).catch((error) => {\r\n          console.error(error);\r\n        });\r\n      }\r\n    }\r\n    loadData();\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"container-fluid\">\r\n        {/* <!-- start page title --> */}\r\n        <div className=\"row\">\r\n          <div className=\"col-12\">\r\n            <div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n              <h4 className=\"mb-0 font-size-18\">Student List</h4>\r\n\r\n              <div className=\"page-title-right\">\r\n                <ol className=\"breadcrumb m-0\">\r\n                  <li className=\"breadcrumb-item\">\r\n                    <a href=\"javascript: void(0);\">ISC Quang Trung</a>\r\n                  </li>\r\n                  <li className=\"breadcrumb-item active\">\r\n                    Management Students\r\n                  </li>\r\n                </ol>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* <!-- end page title --> */}\r\n        {/* Table */}\r\n        <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <div className=\"row mb-2\">\r\n                    <div className=\"col-sm-4\">\r\n                      <div className=\"search-box mr-2 mb-2 d-inline-block\">\r\n                        <div className=\"position-relative\">\r\n                          <SearchStudent onSubmit={handedSearchChange}/>\r\n                          <i className=\"bx bx-search-alt search-icon\" />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"col-sm-8\">\r\n                      <div className=\"text-sm-right\">\r\n                        <button type=\"button\" onClick={() => handleModalShow(null, 0)} className=\"btn btn-success btn-rounded mb-2 mr-2\">\r\n                          <i className=\"bx bxs-add-to-queue\"/> Add New Student</button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"table-responsive\">\r\n                    <table className=\"table table-centered table-nowrap\">\r\n                      <thead className=\"thead-light\">\r\n                        <tr>\r\n                          <th style={{width: 10}}>#</th>\r\n                          <th>Code</th>\r\n                          <th>Avatar</th>\r\n                          <th>Full name</th>\r\n                          <th>Phone</th>\r\n                          <th>Email</th>\r\n                          <th>University</th>\r\n                          <th>Status</th>\r\n                          <th>Action</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {students.length == 0 ? (\r\n                          <tr className=\"text-center\">\r\n                            <td colspan=\"9\">Not found student with keyword: \"<strong>{filters.search}</strong>\"!</td>\r\n                          </tr>\r\n                        ):(\r\n                          students.map((student, idx) => {\r\n                            return (\r\n                            <tr>\r\n                              <td>{idx + 1}</td>\r\n                              <td><a href=\"javascript: void(0);\" className=\"text-body font-weight-bold\">{student.codeStu}</a> </td>\r\n                              <td style={{width: 100}}>\r\n                                <img className=\"img-fluid img-thumbnai rounded mx-auto\" \r\n                                    src={api.url.image + student.image}\r\n                                    alt={\"Hinh \" + student.lastName} />\r\n                              </td>\r\n                              <td>{student.firstName} {student.lastName}</td>\r\n                              <td>{student.phoneStu}</td>\r\n                              <td>{student.emailStu}</td>\r\n                              {/* <td>ISC-13</td> */}\r\n                              <td>{student.university.nameUni}</td>\r\n                              <td>\r\n                                {(() => {\r\n                                  switch (student.typeStu) {\r\n                                    case \"Studying\":\r\n                                      return <span className=\"badge badge-pill badge-success font-size-12\">{student.typeStu}</span>;\r\n                                    case \"Graduate\":\r\n                                      return <span className=\"badge badge-pill badge-primary font-size-12\">{student.typeStu}</span>;\r\n                                    case \"Reserve\":\r\n                                      return <span className=\"badge badge-pill badge-warning font-size-12\">{student.typeStu}</span>;\r\n                                  }\r\n                                })()}\r\n                              </td>\r\n                              <td>\r\n                                <a href=\"javascript:void(0);\" onClick={(e) => handleModalShow(e, student.id)} className=\"mr-3 text-primary\"><i className=\"fas fa-user-edit font-size-15\" /></a>\r\n                                <a href=\"javascript:void(0);\" onClick={(e) => confirmDeleteStudent(e, student.id)} className=\"text-danger\"><i className=\"far fa-trash-alt font-size-15\" /></a>\r\n                              </td>\r\n                            </tr>\r\n                            );\r\n                          })\r\n                        )}\r\n                        \r\n                      </tbody>\r\n                    </table>\r\n                  </div>\r\n                  <Pagination pagination={pagination} onPageChange={handlePageChange}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        {/* Table */}\r\n      </div>\r\n      \r\n      {/* Modal  */}\r\n      <Modal\r\n        show={modalShow}\r\n        onHide={handleModalClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n        size=\"xl\"\r\n      >\r\n        <Modal.Header closeButton>\r\n              {modalUpdate ? (\r\n                <Modal.Title>Update Student</Modal.Title>\r\n              ) : (\r\n                <Modal.Title>New Student</Modal.Title>\r\n              )}\r\n        </Modal.Header>\r\n        <form onSubmit={formik.handleSubmit} enctype=\"multipart/form-data\">\r\n          <Modal.Body>\r\n            <div className=\"row px-3\">         \r\n              <div className=\"col-sm-12 col-lg-2\">\r\n                <div className=\"avatar-upload-jsk py-2 text-center\">\r\n                  <div className=\"avatar-edit\">\r\n                    <input \r\n                      type=\"file\" \r\n                      name=\"image\" \r\n                      id=\"imageUpload\"\r\n                      accept=\".png, .jpg, .jpeg, .gif\"\r\n                      onChange={(event)=>{\r\n                        formik.setFieldValue(\"image\",event.currentTarget.files[0]);\r\n                        if (event.currentTarget.files && event.currentTarget.files[0]) {\r\n                            var reader = new FileReader();\r\n                            reader.onload = function(e) {\r\n                                $('#imagePreview').css('background-image', 'url('+e.target.result +')');\r\n                                $('#imagePreview').hide();\r\n                                $('#imagePreview').fadeIn(650);\r\n                            }\r\n                            reader.readAsDataURL(event.currentTarget.files[0]);\r\n                        }\r\n                      }}\r\n                    />      \r\n                  </div>\r\n                  <div className=\"avatar-preview-jsk mb-2\">\r\n                    <label htmlFor=\"imageUpload\" className=\"imageUpload\"> <i className=\"bx bxs-cloud-upload\" /></label>\r\n                    {modalUpdate ? (\r\n                     <div id=\"imagePreview\" style={{backgroundImage: 'url(\"'+api.url.image + formik.values.oldImage +'\")'}} />\r\n                    ) : (\r\n                     <div id=\"imagePreview\" style={{backgroundImage: 'url(\"https://timvieclam.xyz/images/avata-playhoder.jpg\")'}} />\r\n                    )}\r\n                  </div>\r\n                  {(formik.touched.image && formik.errors.image)?(\r\n                    <small class=\"text-danger font-size-13 font-weight-bold m-auto pt-5\">\r\n                      Avatar is {formik.errors.image}\r\n                  </small>\r\n                  ):(\"\")}\r\n                </div>\r\n              </div>\r\n              <div className=\"col-sm-12 col-lg-10\">\r\n                <div className=\"row\">\r\n\r\n                  <div className=\"col-6\">\r\n                    <div class=\"form-group\">\r\n                      <label htmlFor=\"multicheckIntake\"> Intake<sup>*</sup> </label>\r\n                      {modalUpdate ? (\r\n                        <Fragment>\r\n                        <Select\r\n                        id=\"multicheckIntake\"\r\n                        isMulti\r\n                        placeholder=\"Choose a intake...\"\r\n                        onChange={(val)=> {\r\n                          setSelectedIntake(val)\r\n                          formik.setFieldValue('updateIntake',val)\r\n                          console.log(val);\r\n                        }}\r\n                        value={selectedIntake}\r\n                        closeMenuOnSelect={true}\r\n                        options={intakes.map((e) => ({\r\n                          label: e.nameIntake,\r\n                          value: e.id,\r\n                          statusIntake: e.statusIntake,\r\n                        }))}\r\n                        isOptionDisabled={(option) => option.statusIntake !== 'Doing'}\r\n                      />\r\n                      {(formik.touched.updateIntake && formik.errors.updateIntake) ?(\r\n                        <small class=\"text-danger\">\r\n                          Required\r\n                        </small>\r\n                      ):(\"\")}\r\n                      </Fragment>\r\n                      ) : (\r\n                        <Fragment>\r\n                        <Select\r\n                          id=\"multicheckIntake\"\r\n                          placeholder=\"Choose a intake...\"\r\n                          onChange={(val)=> { formik.setFieldValue('intake',val) }}\r\n                          value={formik.values.intake}\r\n                          closeMenuOnSelect={true}\r\n                          options={intakes.map((e) => ({\r\n                            label: e.nameIntake,\r\n                            value: e.id,\r\n                            statusIntake: e.statusIntake,\r\n                          }))}\r\n                          isOptionDisabled={(option) => option.statusIntake !== 'Doing'}\r\n                        />\r\n                        {(formik.touched.intake && formik.errors.intake) ?(\r\n                          <small class=\"text-danger\">\r\n                            {formik.errors.intake}\r\n                          </small>\r\n                        ):(\"\")}\r\n                      </Fragment>\r\n                      )}\r\n                  \r\n                      </div>\r\n                    </div>\r\n                    \r\n                    <div className=\"col-6\">\r\n                      <div class=\"form-group\">\r\n                        <label htmlFor=\"selectedUniver\"> University<sup>*</sup></label>\r\n                        <Select\r\n                            id=\"selectedUniver\"\r\n                            placeholder=\"Choose a university...\"\r\n                            onChange={(val)=> { formik.setFieldValue('university',val) }}\r\n                            value={formik.values.university}\r\n                            closeMenuOnSelect={true}\r\n                            options={univers.map((e) => ({\r\n                              label: e.nameUni,\r\n                              value: e.id\r\n                            }))}\r\n                          />\r\n                          {(formik.touched.university && formik.errors.university) ?(\r\n                            <small class=\"text-danger\">\r\n                              {formik.errors.university}\r\n                            </small>\r\n                          ):(\"\")}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {modalUpdate ? (\r\n                      <div className=\"col-3\">\r\n                        <div class=\"form-group\">\r\n                          <label htmlFor=\"setSelectedWorkingStatus\"> Working status</label>\r\n                          <Select\r\n                              id=\"setSelectedWorkingStatus\"\r\n                              placeholder=\"Choose a working status...\"\r\n                              onChange={(val)=> { formik.setFieldValue('workingStatus',val) }}\r\n                              value={formik.values.workingStatus}\r\n                              options={optionsWorkingStatus}\r\n                              closeMenuOnSelect={true}\r\n                            />\r\n                        </div>\r\n                      </div>\r\n                    ) : (\"\")}\r\n\r\n\r\n                    <div className={`col-${modalUpdate ? (3):(6)}`}>\r\n                      <div class=\"form-group\">\r\n                        <label htmlFor=\"selectedTypeStu\"> Learing status<sup>*</sup></label>\r\n                        <Select\r\n                            id=\"selectedTypeStu\"\r\n                            placeholder=\"Choose a type students...\"\r\n                            onChange={(val)=> { formik.setFieldValue('typeStudent',val) }}\r\n                            frmField={formik.getFieldProps(\"typeStudent\")}\r\n                            value={formik.values.typeStudent}\r\n                            closeMenuOnSelect={true}\r\n                            err={formik.touched.typeStudent && formik.errors.typeStudent}\r\n                            errMessage={formik.errors.typeStudent}\r\n                            options={optionsTypeStu}\r\n                          />\r\n                      </div>\r\n                    </div>\r\n\r\n\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"codeStu\"\r\n              name=\"codeStu\"\r\n              type=\"text\"\r\n              label=\"Student code *\"\r\n              frmField={formik.getFieldProps(\"codeStu\")}\r\n              err={formik.touched.codeStu && formik.errors.codeStu}\r\n              errMessage={formik.errors.codeStu}\r\n              value={formik.values.codeStu}\r\n              onChange={formik.handleChange}\r\n            />\r\n            \r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuFirstName\"\r\n              type=\"text\"\r\n              label=\"First name *\"\r\n              frmField={formik.getFieldProps(\"firstName\")}\r\n              err={formik.touched.firstName && formik.errors.firstName}\r\n              errMessage={formik.errors.firstName}\r\n              value={formik.values.firstName}\r\n              onChange={formik.handleChange}\r\n            />\r\n\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuLastName\"\r\n              type=\"text\"\r\n              label=\"Last name *\"\r\n              frmField={formik.getFieldProps(\"lastName\")}\r\n              err={formik.touched.lastName && formik.errors.lastName}\r\n              errMessage={formik.errors.lastName}\r\n              value={formik.values.lastName}\r\n              onChange={formik.handleChange}\r\n            />\r\n\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuEmail\"\r\n              type=\"email\"\r\n              label=\"Email *\"\r\n              frmField={formik.getFieldProps(\"emailStu\")}\r\n              err={formik.touched.emailStu && formik.errors.emailStu}\r\n              errMessage={formik.errors.emailStu}\r\n              value={formik.values.emailStu}\r\n              onChange={formik.handleChange}\r\n            />\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuPhone\"\r\n              type=\"text\"\r\n              label=\"Phone number *\"\r\n              frmField={formik.getFieldProps(\"phoneStu\")}\r\n              err={formik.touched.phoneStu && formik.errors.phoneStu}\r\n              errMessage={formik.errors.phoneStu}\r\n              value={formik.values.phoneStu}\r\n              onChange={formik.handleChange}\r\n            />\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuAddress\"\r\n              type=\"text\"\r\n              label=\"Address *\"\r\n              frmField={formik.getFieldProps(\"addressStu\")}\r\n              err={formik.touched.addressStu && formik.errors.addressStu}\r\n              errMessage={formik.errors.addressStu}\r\n              value={formik.values.addressStu}\r\n              onChange={formik.handleChange}\r\n            />\r\n\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"6\"\r\n              rows=\"1\"\r\n              id=\"txtStuGPA\"\r\n              type=\"number\"\r\n              label=\"GPA *\"\r\n              frmField={formik.getFieldProps(\"gpa\")}\r\n              err={formik.touched.gpa && formik.errors.gpa}\r\n              errMessage={formik.errors.gpa}\r\n              value={formik.values.gpa}\r\n              onChange={formik.handleChange}\r\n            />\r\n            <Input\r\n              typeInput=\"1\"\r\n              column=\"12\"\r\n              rows=\"2\"\r\n              id=\"txtStuNote\"\r\n              type=\"text\"\r\n              label=\"Note:\"\r\n              frmField={formik.getFieldProps(\"noteStu\")}\r\n              err={formik.touched.note && formik.errors.note}\r\n              errMessage={formik.errors.note}\r\n              value={formik.values.note}\r\n              onChange={formik.handleChange}\r\n            />\r\n\r\n                {modalUpdate ? (\r\n                  <Fragment>\r\n                  <Input\r\n                    typeInput=\"1\"\r\n                    column=\"6\"\r\n                    rows=\"1\"\r\n                    readOnly\r\n                    type=\"text\"\r\n                    label=\"Created by\"\r\n                    value = {`${formik.values.createdBy} - ${new Date(formik.values.createdDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                  />\r\n                    {formik.values.updatedBy != null ?(\r\n                    <Fragment>\r\n                      <Input\r\n                      typeInput=\"1\"\r\n                      column=\"6\"\r\n                      rows=\"1\"\r\n                      readOnly\r\n                      type=\"text\"\r\n                      label=\"Update by\"\r\n                      value = {`${formik.values.updatedBy} - ${new Date(formik.values.updatedDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                      />\r\n                    </Fragment>\r\n                    ):(\"\")}\r\n                  </Fragment>\r\n                ) : (\"\")}\r\n              \r\n              </div>\r\n            </div>\r\n          </div>\r\n          </Modal.Body>\r\n          <div className=\"row justify-content-end small\">\r\n            <div className=\"col-auto pr-5\">\r\n              <p className=\"p-0\">\r\n                Field required (<span className=\"text-danger\">*</span>)\r\n              </p>\r\n            </div>\r\n          </div>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleModalClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" type=\"submit\">\r\n              Save\r\n            </Button>\r\n          </Modal.Footer>\r\n        </form>\r\n      </Modal>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Student;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\intakeService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\universityService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\companyService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\api.js",["270"],"import axios from 'axios';\r\nimport store from './../Store/store';\r\n\r\nconst url = {\r\n    image: \"http://localhost:8080/api/file/downloadFile/\",\r\n    baseURL : \"http://localhost:8080/api\",\r\n    //Student\r\n    listStudent: \"/student/allStudent\",\r\n    addStudent: \"/student/newStudent\",\r\n    getOneStudent: \"/student/oneStudent\",\r\n    updateStudentHasImg: \"/student/updateStudentImg\",\r\n    updateStudentNoImg: \"/student/updateStudentNotImg\",\r\n    deleteStudent: \"/student/deleteStudent\",\r\n    paginationStudent: \"/student/pagination\",\r\n    searchStudent: \"/student/searchStudent\",\r\n\r\n    //Intake\r\n    listIntake: \"/intake/listIntake\",\r\n    addIntake: \"/intake/newIntake\",\r\n    getOneIntake: \"/intake/getIntake\",\r\n    updateIntake: \"/intake/editIntake\",\r\n    deleteIntake: \"/intake/deleteIntake\",\r\n    paginationIntake: \"/intake/pagination\",\r\n    searchStudent: \"/student/searchIntake\",\r\n  \r\n    //Major\r\n    listMajor: \"/major/listMajor\",\r\n    addMajor: \"/major/newMajor\",\r\n    getOneMajor: \"/major/getMajor\",\r\n    updateMajor: \"/major/editMajor\",\r\n    deleteMajor: \"/major/deleteMajor\",\r\n    paginationMajor: \"/major/pagination\",\r\n    searchMajor: \"/major/searchMajor\",\r\n\r\n    //Student - Intake\r\n    listStudentIntake: \"/student-intake/allStudentIntake\",\r\n    getOneStudentIntake:\"/student-intake/getIntakeOfStu\",\r\n    addStudentIntake:\"/student-intake/postIntakeOfStu\",\r\n    updateIntakeOfStuArray:\"/student-intake/updateIntakeOfStuArray\",\r\n    updateIntakeOfStu:\"/student-intake/updateIntakeOfStu\",\r\n    deleteIntakeOfStu: \"/student-intake/deleteIntakeOfStu\",\r\n\r\n    //university\r\n    listUniversity: \"/university/listUniversity\",\r\n    getUniversity: \"/university/getUniversity\",\r\n    newUniversity: \"/university/newUniversity\",\r\n    editUniversity: \"/university/editUniversity\",\r\n    deleteUniversity: \"/university/deleteUniversity\",\r\n    paginationUniversity: \"/university/pagination\",\r\n    \r\n    //company\r\n    listCompany: \"/company/listCompany\",\r\n    getCompany: \"/company/getCompany\",\r\n    newCompany: \"/company/newCompany\",\r\n    editCompany: \"/company/editCompany\",\r\n    deleteCompany: \"/company/deleteCompany\",\r\n    paginationCompany: \"/company/pagination\",\r\n\r\n    //room\r\n    listRoom: \"/room/listRoom\",\r\n    getRoom: \"/room/getRoom\",\r\n    newRoom: \"/room/newRoom\",\r\n    editRoom: \"/room/editRoom\",\r\n    deleteRoom: \"/room/deleteRoom\",\r\n    paginationRoom: \"/room/pagination\",\r\n\r\n    //Subject\r\n    paginationSubject : \"/subject/pagination\",\r\n    searchSubject : \"/subject/searchSubject\",\r\n\r\n    //Lecturer\r\n    paginationLecturer: \"/lecturer/pagination\",\r\n    newLecturer: \"/lecturer/newLecturer\",\r\n    getLecturer: \"/lecturer/getLecturer\",\r\n    updateLecturerNotImage: \"/lecturer/editLecturerNotImg\", \r\n    updateLecturerHasImage: \"/lecturer/editLecturerImg\",\r\n    deleteLecturer: \"/lecturer/deleteLecturer\",\r\n\r\n    // Auth\r\n    login: \"/auth/login\"\r\n}\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL : url.baseURL,\r\n    //Student\r\n    listStudent: url.listStudent,\r\n    addStudent: url.addStudent,\r\n    getOneStudent: url.getOneStudent,\r\n    image: url.image,\r\n    updateStuImg: url.updateStuImg,\r\n    deleteStudent: url.deleteStudent,\r\n    paginationStudent: url.paginationStudent,\r\n    searchStudent: url.searchStudent,\r\n    //Univer\r\n    listUniversity: url.listUniversity,\r\n    getOneUniversity: url.getOneUniversity,\r\n    paginationUniversity: url.paginationUniversity,\r\n    //Company\r\n    listCompany: url.listCompany,\r\n    getOneCompany: url.getOneCompany,\r\n    //Intake\r\n    listIntake: url.listIntake,\r\n    getOneIntake: url.getOnIntake,\r\n    addIntake: url.addIntake,\r\n    //Stu_Company\r\n    addStudentCompany: url.addStudentCompany,\r\n    //Subject\r\n    paginationSubject: url.paginationSubject,\r\n    searchSubject: url.searchSubject,\r\n    //Stu_Intake\r\n    listStudentIntake: url.listStudentIntake,\r\n    addStudentIntake: url.addStudentIntake,\r\n    getOneStudentIntake: url.getOneStudentIntake,\r\n    updateIntakeOfStuArray: url.updateIntakeOfStuArray,\r\n    updateIntakeOfStu: url.updateIntakeOfStu,\r\n    deleteIntakeOfStu: url.deleteIntakeOfStu,\r\n    //Lecturer\r\n    paginationLecturer: url.paginationLecturer,\r\n    newLecturer: url.newLecturer,\r\n    getLecturer: url.getLecturer,\r\n    updateLecturerNotImage: url.updateLecturerNotImage,\r\n    updateLecturerHasImage: url.updateLecturerHasImage,\r\n    deleteLecturer: url.deleteLecturer,\r\n\r\n    //Header\r\n    headers: {\r\n        \"Content-Type\" :\"multipart/form-data\",\r\n        Accept: \"application/json\",\r\n    }\r\n});\r\n\r\ninstance.interceptors.request.use((request) => {\r\n    const state = store.getState();    \r\n    if (state.auth.token) {\r\n      request.headers.Authorization = `Bearer ${state.auth.token}`;\r\n    }\r\n    return request;\r\n  });\r\n\r\nconst api = {\r\n    url,\r\n    instance: instance,\r\n    get: instance.get,\r\n    post: instance.post,\r\n    put: instance.put,\r\n    delete: instance.delete\r\n}\r\nexport default api;","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentIntakeService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\studentCompanyService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\input.jsx",["271","272","273","274","275"],"import React, { Component, Fragment} from \"react\";\r\n\r\nclass CustomInput extends Component {\r\n  state = {};\r\n  render() {\r\n    const {\r\n      typeInput, //1: Vertical(Dọc), 2: Horizontal(Ngan)\r\n      onChange,\r\n      value,\r\n      type,\r\n      id,\r\n      label,\r\n      placeHolder,\r\n      labelSize,\r\n      column, // Thêm cột Column BootStrap VD: column=\"6\"->col-sm-6\r\n      inputRef,\r\n      frmField,\r\n      err,\r\n      errMessage,\r\n      ...others\r\n    } = this.props;\r\n\r\n    const typeinput = typeInput ? typeInput : \"1\";\r\n    const size = labelSize ? labelSize : 3;\r\n    const classLeft = `col-sm-${size} col-form-label text-center`;\r\n    const ColumnClass = `col-sm-${column}`;\r\n    const classRight = `col-sm-${12 - size}`;\r\n    const inputClass = `form-control  ${err ? \"is-invalid\" : \"\"}`;\r\n\r\n    return (\r\n      <Fragment>\r\n            {(() => {\r\n                switch(typeinput) {\r\n                  case \"1\":\r\n                    return(\r\n                      <div className={ColumnClass}>\r\n                        <div className=\"form-group\">\r\n                          <label htmlFor=\"formrow-email-input\">{label}</label>\r\n                          {others[\"rows\"] == 1 ? (\r\n                            <input\r\n                              onChange={onChange}\r\n                              value={value}\r\n                              ref={inputRef}\r\n                              type={type}\r\n                              className={inputClass}\r\n                              id={id}\r\n                              placeholder={placeHolder}\r\n                              {...frmField}\r\n                              {...others}\r\n                            />\r\n                          ) : (\r\n                            <textarea\r\n                              ref={inputRef}\r\n                              className={inputClass}\r\n                              id={id}\r\n                              type={type}\r\n                              placeholder={placeHolder}\r\n                              {...frmField}\r\n                              {...others}\r\n                            ></textarea>\r\n                          )}\r\n                          {err ? <div className=\"invalid-feedback\">{errMessage}</div> : null}\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  break;\r\n\r\n                  case \"2\":\r\n                    return(\r\n                      <div className={ColumnClass}>\r\n                        <div className=\"form-group row\">\r\n                          <label htmlFor={id} className={classLeft}>\r\n                            {label}\r\n                          </label>\r\n                          <div className={classRight}>\r\n                            {others[\"rows\"] == 1 ? (\r\n                              <input\r\n                                onChange={onChange}\r\n                                value={value}\r\n                                ref={inputRef}\r\n                                type={type}\r\n                                className={inputClass}\r\n                                id={id}\r\n                                placeholder={placeHolder}\r\n                                {...frmField}\r\n                                {...others}\r\n                              />\r\n                            ) : (\r\n                              <textarea\r\n                                ref={inputRef}\r\n                                className={inputClass}\r\n                                id={id}\r\n                                type={type}\r\n                                placeholder={placeHolder}\r\n                                {...frmField}\r\n                                {...others}\r\n                              ></textarea>\r\n                            )}\r\n                            {err ? <div className=\"invalid-feedback\">{errMessage}</div> : null}\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )\r\n                  break;\r\n                }\r\n            })()}\r\n        </Fragment>\r\n    );\r\n  }\r\n}\r\nexport default CustomInput;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\paginationStudent.jsx",["276","277","278","279","280","281","282","283","284","285"],"import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nPagination.propTypes = {\r\n  pagination: PropTypes.object.isRequired,\r\n  onPageChange: PropTypes.func,\r\n};\r\n\r\nPagination.defaultProps = {\r\n  onPageChange: null,\r\n}\r\n\r\nfunction Pagination(props) {\r\n  const {pagination, onPageChange} = props;\r\n  const {page,size,totalRows} = pagination;\r\n  const totalPage = Math.ceil(totalRows/size);\r\n\r\n  function handlePageChange(newPage) {\r\n    if(onPageChange){\r\n      onPageChange(newPage);\r\n    }\r\n  }\r\n  return(\r\n    <div>\r\n      <ul className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n      <div className=\"mt-1 mr-2 mr-auto\">Total <strong>{totalRows}</strong> Student</div>\r\n        {page == 0 ?(\r\n          <li className=\"page-item disabled\">\r\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page-1)}>\r\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\r\n          </a>\r\n        </li>\r\n        ):(\r\n          <li className=\"page-item \">\r\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page-1)}>\r\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\r\n          </a>\r\n        </li>\r\n        )}\r\n        \r\n        <li className=\"page-item py-1 px-2 active text-dark\">Trang {page+1}/{totalPage}</li>\r\n\r\n        {page == totalPage-1 ?(\r\n        <li className=\"page-item disabled\">\r\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page+1)}>\r\n            <i class=\"fas fa-chevron-right\"></i>\r\n          </a>\r\n        </li>\r\n        ):(\r\n          <li className=\"page-item\">\r\n            <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page+1)}>\r\n              <i class=\"fas fa-chevron-right\"></i>\r\n            </a>\r\n          </li>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination;","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Student\\searchStudent.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\SideBar\\SideBar.jsx",["286"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Auth\\login.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\intake.jsx",["287","288","289","290","291","292","293","294","295","296","297"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select from \"react-select\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport queryString from \"query-string\";\nimport DatePicker, { registerLocale } from \"react-datepicker\";\nimport Input from \"../../Controls/input\";\nimport intakeService from \"../../Services/intakeService\";\nimport majorService from \"../../Services/majorService\";\nimport Pagination from \"./paginationIntake\";\nimport SearchIntake from \"./searchIntake\";\n\n\nconst Intake = (props) => {\n  // Option for Intake Status\n  const optionsIntakeStatus = [\n    { label: \"None\", value: \"None\" },\n    { label: \"Doing\", value: \"Doing\" },\n    { label: \"Done\", value: \"Done\" },\n  ];\n  const [selectedIntakeStatus, setSelectedIntakeStatus] = useState({\n    label: \"None\",\n    value: \"None\",\n  });\n\n  // Custom Select Intake Status\n  for (var i = 0; i < optionsIntakeStatus.length; i++) {\n    if (selectedIntakeStatus.length >= 1) {\n      optionsIntakeStatus[i].disabled = true;\n    }\n  }\n\n  // Option for Major\n  const [major, setMajor] = useState([]);\n  const [startDayState, setStartDayState] = useState(new Date());\n  const [modalUpdate, setModalUpdate] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      codeIntake: \"\",\n      nameIntake: \"\",\n      startDay: \"\",\n      endDay: \"\",\n      statusIntake: { label: \"None\", value: \"None\" },\n      createdBy: \"Admin\",\n      updatedBy: \"Admin\",\n      selectMajor: \"\",\n    },\n    validationSchema: Yup.object({\n      codeIntake: Yup.string()\n        .required(\"Intake code is required\")\n        .min(3)\n        .max(50, \"Intake code must be lester than 50 characters\"),\n      nameIntake: Yup.string()\n        .required(\"Intake name is required\")\n        .max(200, \"Intake name must be lester than 200 characters\"),\n      startDay: Yup.date().required(\"Start Date is required\").typeError('INVALID_DATE'),\n      endDay: Yup.date().required(\"Ended Date is required\").min(new Date(startDayState),\"Finish date must not be greater than the start date\"),\n      selectMajor: Yup.object().required(\"Major is required\"),\n    }),\n    onSubmit: (values) => {\n      const newValue = {\n        ...values,\n        startDay: new Date(values.startDay).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric'}),\n        endDay: new Date(values.endDay).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric'}),\n      }\n      handleFormSubmit(values);\n    },\n  });\n\n  //   Intake\n  const [intake, setIntake] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const handleModalClose = () => setModalShow(false);\n\n  const [pagination, setPagination] = useState({\n    page: 0,\n    size: 4,\n    totalRows: 1,\n  });\n\n  const [filters, setFilters] = useState({\n    page: 0,\n    size: 4,\n    sort: \"ASC\",\n    // typeIntake: \"n\",\n    search: \"\",\n  });\n\n  const handlePageChange = (newPage) => {\n    setFilters({\n      ...filters,\n      page: newPage,\n    });\n  };\n\n  const handedSearchChange = (newSearch) => {\n    setFilters({\n      ...filters,\n      page: 0,\n      search: newSearch.searchTerm,\n    });\n  };\n\n  //   Load Data\n  const loadData = () => {\n    //Get Intake with Filters\n    const paramsFilters = queryString.stringify(filters);\n    intakeService.paginationIntake(paramsFilters).then((res) => {\n      const totalRows = res.data[0].totalElements;\n      const size = res.data[0].size;\n      const pageCurrent = res.data[0].pageable.pageNumber;\n      if (res.status === 0) {\n        setIntake(res.data[0].content);\n        setPagination({\n          page: pageCurrent,\n          size: size,\n          totalRows: totalRows,\n        });\n      }\n    });\n\n    //Get all major\n    majorService.getAll().then((res) => {\n      if (res.status === 0) {\n        setMajor(res.data);\n      }\n    });\n  };\n\n  //Didmount load data\n  useEffect(() => {\n    loadData();\n    document.title = \"Intakes - ISC Quang Trung Management\";\n  }, [filters]);\n\n  // Update Intake\n  const [intakeId, setIntakeId] = useState(0);\n  //Check Form Update And Add Intake\n  const handleModalShow = (e, dataId) => {\n    if (e) e.preventDefault();\n    setIntakeId(dataId);\n    if (dataId > 0) {\n      setModalUpdate(true);\n      setModalShow(true);\n      intakeService.get(dataId).then((res) => {\n        const intakeById = res.data[0];\n        formik.setFieldValue('codeIntake',intakeById.codeIntake)\n        formik.setFieldValue('nameIntake',intakeById.nameIntake)\n        formik.setFieldValue('startDay', new Date(intakeById.startDay))\n        formik.setFieldValue('endDay', new Date(intakeById.endDay))\n        formik.setFieldValue('selectMajor',{ label: intakeById.major.nameMajor, value: intakeById.major.id })\n        formik.setFieldValue('statusIntake', { label: intakeById.statusIntake, value: intakeById.statusIntake })\n        formik.setFieldValue('createdDate',intakeById.createdDate)\n        formik.setFieldValue('createdBy',intakeById.createdBy)\n        formik.setFieldValue('updatedDate',intakeById.updatedDate)\n        formik.setFieldValue('updatedBy',intakeById.updatedBy)\n      });\n    } else {\n      setModalUpdate(false);\n      formik.resetForm();\n      setModalShow(true);\n    }\n  };\n\n  const confirmDeleteIntake = (e, intakeId) => {\n    if (e) e.preventDefault();\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Bạn có muốn xóa khóa học này?\",\n      buttons: [\n        {\n          label: \"Đồng ý\",\n          onClick: () => handleDeleteIntake(intakeId),\n        },\n        {\n          label: \"Hủy bỏ\",\n        },\n      ],\n    });\n  };\n\n  //Delete new Intake\n  const handleDeleteIntake = (intakeId) => {\n    intakeService.remove(intakeId).then((res) => {\n      if (res.status === 0) {\n        toast.success(\"Delete Intake Success\");\n        loadData();\n      } else {\n        toast.error(res.message);\n      }\n    });\n  };\n\n  //   Add new Intake\n  const handleFormSubmit = () => {\n    if (intakeId === 0) {\n      intakeService.addNew(\n          formik.values.codeIntake,\n          formik.values.nameIntake,\n          new Date(formik.values.startDay).toISOString(),\n          new Date(formik.values.endDay).toISOString(),\n          formik.values.statusIntake.value,\n          \"Admin\",\n          formik.values.selectMajor.value,\n        )\n        .then((res) => {\n          if (res.status === 0) {\n            toast.success(\"Add new intake success\");\n            loadData();\n            handleModalClose();\n          } else {\n            toast.error(\"Add intake error, \" + res.message);\n          }\n        });\n    } else {\n      intakeService\n        .update(\n          intakeId,\n          formik.values.codeIntake,\n          formik.values.nameIntake,\n          new Date(formik.values.startDay).toISOString(),\n          new Date(formik.values.endDay).toISOString(),\n          formik.values.statusIntake.value,\n          \"Admin\",\n          formik.values.selectMajor.value,\n        )\n        .then((res) => {\n          if (res.status === 0) {\n            toast.success(\"Update Success\");\n            loadData();\n            handleModalClose();\n          } else {\n            toast.error(\"Update intake error\");\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n    loadData();\n  };\n\n  return (\n    <Fragment>\n      <div className=\"container-fluid\">\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"page-title-box d-flex align-items-center justify-content-between\">\n              <h4 className=\"mb-0 font-size-18\">Intake List</h4>\n\n              <div className=\"page-title-right\">\n                <ol className=\"breadcrumb m-0\">\n                  <li className=\"breadcrumb-item\">\n                    <a href=\"javascript: void(0);\">ISC Quang Trung</a>\n                  </li>\n                  <li className=\"breadcrumb-item active\">Management Intakes</li>\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* <!-- end page title --> */}\n        {/* Table */}\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"row mb-2\">\n                  <div className=\"col-sm-4\">\n                    <div className=\"search-box mr-2 mb-2 d-inline-block\">\n                      <div className=\"position-relative\">\n                        <SearchIntake onSubmit={handedSearchChange} />\n                        <i className=\"bx bx-search-alt search-icon\" />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-8\">\n                    <div className=\"text-sm-right\">\n                      <button\n                        type=\"button\"\n                        onClick={() => handleModalShow(null, 0)}\n                        className=\"btn btn-success btn-rounded mb-2 mr-2\"\n                      >\n                        <i className=\"bx bxs-add-to-queue\" /> Add New Intake\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-centered table-nowrap\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th style={{ width: 10 }}>#</th>\n                        <th>Intake Code</th>\n                        <th>Name Intake</th>\n                        <th>Start Day</th>\n                        <th>Finish Day</th>\n                        <th>During</th>\n                        <th>Status</th>\n                        <th>Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {intake.length == 0 ? (\n                        <tr className=\"text-center\">\n                          <td colspan=\"9\">\n                            Not found intake :(\n                            <strong>{filters.search}</strong>\"!\n                          </td>\n                        </tr>\n                      ) : (\n                        intake.map((intake, idx) => {\n                          return (\n                            <tr>\n                              <td>{idx + 1}</td>\n                              <td className=\"font-weight-bold\">{intake.codeIntake}</td>\n                              <td>{intake.nameIntake}</td>\n                              <td>\n                                {new Date(intake.startDay).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric'})}\n                              </td>\n                              <td>\n                                {new Date(intake.endDay).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric'})}\n                              </td>\n                              <td>\n                                {Math.round((new Date(intake.endDay) - new Date(intake.startDay)) / (7 * 24 * 60 * 60 * 1000))} tuần\n                              </td>\n                              <td>{intake.statusIntake}</td>\n                              <td>\n                                <a href=\"javascript:void(0);\"\n                                  onClick={(e) => handleModalShow(e, intake.id)}\n                                  className=\"mr-3 text-primary\">\n                                  <i className=\"fas fa-user-edit font-size-15\" />\n                                </a>\n                                {intake.statusIntake === \"None\" ? (\n                                  <a  href=\"javascript:void(0);\"\n                                  onClick={(e) =>\n                                    confirmDeleteIntake(e, intake.id)\n                                  }\n                                  className=\"text-danger\" >\n                                  <i className=\"far fa-trash-alt font-size-15\" />\n                                </a>\n                                ):(\"\")}\n                              </td>\n                            </tr>\n                          );\n                        })\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n                <Pagination\n                  pagination={pagination}\n                  onPageChange={handlePageChange}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* Table */}\n      </div>\n\n      {/* Modal  */}\n      <Modal\n        show={modalShow}\n        onHide={handleModalClose}\n        backdrop=\"static\"\n        keyboard={false}\n        size=\"lg\"\n      >\n        <Modal.Header closeButton>\n          {modalUpdate ? (\n            <Modal.Title>Update Intake</Modal.Title>\n          ) : (\n            <Modal.Title>New Intake</Modal.Title>\n          )}\n        </Modal.Header>\n        <form onSubmit={formik.handleSubmit} enctype=\"application/json\">\n          <Modal.Body>\n            <div className=\"row px-4\">\n              <Input\n                typeInput=\"1\"\n                column=\"6\"\n                rows=\"1\"\n                id=\"codeIntake\"\n                name=\"codeIntake\"\n                type=\"text\"\n                label=\"Intake code *\"\n                frmField={formik.getFieldProps(\"codeIntake\")}\n                err={formik.touched.codeIntake && formik.errors.codeIntake}\n                errMessage={formik.errors.codeIntake}\n                value={formik.values.codeIntake}\n                onChange={formik.handleChange}\n              />\n\n              <div className=\"col-6\">\n                <div class=\"form-group\">\n                  <label htmlFor=\"selectedMajor\">Major</label>\n                  <Select\n                    id=\"selectedMajor\"\n                    placeholder=\"Select major...\"\n                    onChange={(val) => {\n                      formik.setFieldValue(\"selectMajor\", val);\n                    }}\n                    value={formik.values.selectMajor}\n                    closeMenuOnSelect={true}\n                    options={major.map((e) => ({\n                      label: e.nameMajor,\n                      value: e.id,\n                    }))}\n                  />\n                  {formik.touched.selectMajor && formik.errors.selectMajor ? (\n                    <small class=\"text-danger\">{formik.errors.selectMajor}</small>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n\n              <Input\n                typeInput=\"1\"\n                column=\"12\"\n                rows=\"1\"\n                id=\"nameIntake\"\n                name=\"nameIntake\"\n                type=\"text\"\n                label=\"Intake name *\"\n                frmField={formik.getFieldProps(\"nameIntake\")}\n                err={formik.touched.nameIntake && formik.errors.nameIntake}\n                errMessage={formik.errors.nameIntake}\n                value={formik.values.nameIntake}\n                onChange={formik.handleChange}\n              />\n\n              {modalUpdate ? (\n                <div className=\"col-12\">\n                  <div class=\"form-group\">\n                    <label htmlFor=\"setSelectedIntakeStatus\">Status intake</label>\n                    <Select\n                      id=\"setSelectedIntakeStatus\"\n                      placeholder=\"Select status intake...\"\n                      onChange={(val) => {\n                        formik.setFieldValue(\"statusIntake\", val);\n                      }}\n                      value={formik.values.statusIntake}\n                      options={optionsIntakeStatus}\n                      closeMenuOnSelect={true}\n                      isOptionDisabled={(option) => option.value === 'None'}\n                    />\n                  </div>\n                </div>\n              ) : (\n                \"\"\n              )}\n\n              <div className=\"col-6\">\n                <div className=\"form-group row\">\n                  <label className=\"col-12\">Start day *</label>\n                  <div className=\"col-12\">\n                  <DatePicker\n                    selectsStart\n                    selected={formik.values.startDay}\n                    onChange={(date) => {\n                      setStartDayState(date);\n                      formik.setFieldValue(\"startDay\", date);\n                    }}\n                    minDate={new Date()}\n                    className=\"col-12 form-control\"                    \n                    placeholderText=\"Select a date start intake\"\n                    dateFormat=\"dd/MM/yyyy\"\n                  />\n                  {formik.touched.startDay && formik.errors.startDay ? (\n                    <small class=\"text-danger\">{formik.errors.startDay}</small>\n                  ) : (\n                    \"\"\n                  )}\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-6\">\n                <div className=\"form-group row\">\n                  <label className=\"col-12\">Finish day *</label>\n                  <div className=\"col-12\">\n                  <DatePicker\n                    selectsEnd\n                    selected={formik.values.endDay}\n                    onChange={(date) => {\n                      formik.setFieldValue(\"endDay\", date);\n                    }}\n                    minDate={formik.values.startDay}\n                    className=\"col-12 form-control\"                    \n                    placeholderText=\"Select a date finish intake\"\n                    dateFormat=\"dd/MM/yyyy\"\n                  />\n                  {formik.touched.endDay && formik.errors.endDay ? (\n                    <small class=\"text-danger\">{formik.errors.endDay}</small>\n                  ) : (\n                    \"\"\n                  )}\n                  </div>\n                </div>\n              </div>\n\n              {modalUpdate ? (\n                <Fragment>\n                  <Input\n                    typeInput=\"1\"\n                    column=\"6\"\n                    rows=\"1\"\n                    readOnly\n                    type=\"text\"\n                    label=\"Create by\"\n                    value={`${formik.values.createdBy} - ${new Date(\n                      formik.values.createdDate\n                    ).toLocaleDateString(\"vi-VI\", {\n                      year: \"numeric\",\n                      month: \"numeric\",\n                      day: \"numeric\",\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    })}`}\n                  />\n                  {formik.values.updatedDate != null ? (\n                    <Fragment>\n                      <Input\n                        typeInput=\"1\"\n                        column=\"6\"\n                        rows=\"1\"\n                        readOnly\n                        type=\"text\"\n                        label=\"Latest Update by\"\n                        value={`${formik.values.updatedBy} - ${new Date(\n                          formik.values.updatedDate\n                        ).toLocaleDateString(\"vi-VI\", {\n                          year: \"numeric\",\n                          month: \"numeric\",\n                          day: \"numeric\",\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                        })}`}\n                      />\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleModalClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Save\n            </Button>\n          </Modal.Footer>\n        </form>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default Intake;\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\major.jsx",["298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313"],"import React, { useState, Fragment, useEffect } from \"react\";\nimport $, { map } from \"jquery\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport MultiSelect from \"react-multi-select-component\";\nimport { confirmAlert } from \"react-confirm-alert\";\nimport \"react-confirm-alert/src/react-confirm-alert.css\";\nimport queryString from \"query-string\";\nimport Select from \"react-select\";\nimport Input from \"../../Controls/input\";\nimport majorService from \"../../Services/majorService\";\nimport intakeService from \"../../Services/intakeService\";\n// Importing toastify module\nimport { toast } from \"react-toastify\";\n// Import toastify css file\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Pagination from \"./paginationMajor\";\nimport SearchMajor from \"./searchMajor\";\ntoast.configure();\n\nconst Major = (props) => {\n  const [modalUpdate, setModalUpdate] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      codeMajor: \"\",\n      nameMajor: \"\",\n      descriptionMajor: \"\",\n      createdBy: \"\",\n      updatedBy: \"\",\n    },\n    validationSchema: Yup.object({\n      codeMajor: Yup.string()\n        .required(\"Major code is required\")\n        .max(50, \"Major code must be lester than 50 characters\"),\n      nameMajor: Yup.string()\n        .required(\"Major name is required\")\n        .max(50, \"Major name must be lester than 50 characters\"),\n      descriptionMajor: Yup.string()\n        .required(\"Major description is required\")\n        .max(2000, \"Major description must be lester than 2000 characters\"),\n    }),\n    onSubmit: (values) => {\n      console.log(\"formik: \", values);\n      handleFormSubmit(values);\n    },\n  });\n\n  //   Major\n  const [major, setMajor] = useState([]);\n  const [modalShow, setModalShow] = useState(false);\n  const handleModalClose = () => setModalShow(false);\n\n  const [pagination, setPagination] = useState({\n    page: 0,\n    size: 4,\n    totalRows: 1,\n  });\n\n  const [filters, setFilters] = useState({\n    page: 0,\n    size: 4,\n    sort: \"ASC\",\n    typeMajor: \"n\",\n    search: \"\",\n  });\n\n  const handlePageChange = (newPage) => {\n    setFilters({\n      ...filters,\n      page: newPage,\n    });\n  };\n\n  const handedSearchChange = (newSearch) => {\n    setFilters({\n      ...filters,\n      page: 0,\n      search: newSearch.searchTerm,\n    });\n  };\n\n  //   Load Data\n  const loadData = () => {\n    //Get Major with Filters\n    const paramsFilters = queryString.stringify(filters);\n    majorService.paginationMajor(paramsFilters).then((res) => {\n      const totalRows = res.data[0].totalElements;\n      const size = res.data[0].size;\n      const pageCurrent = res.data[0].pageable.pageNumber;\n      if (res.status === 0) {\n        setMajor(res.data[0].content);\n        setPagination({\n          page: pageCurrent,\n          size: size,\n          totalRows: totalRows,\n        });\n      }\n    });\n  };\n\n  //Didmount load data\n  useEffect(() => {\n    loadData();\n    document.title = \"Majors - ISC Quang Trung Management\";\n  }, [filters]);\n\n  //   Update Major\n  const [majorId, setMajorId] = useState(0);\n  //Check Form Update And Add Major\n  const handleModalShow = (e, dataId) => {\n    if (e) e.preventDefault();\n    setMajorId(dataId);\n\n    if (dataId > 0) {\n      setModalUpdate(true);\n      setModalShow(true);\n      majorService.get(dataId).then((res) => {\n        const majorById = res.data[0];\n        console.log(majorById);\n        formik.setValues(majorById);\n      });\n    } else {\n      setModalUpdate(false);\n      formik.resetForm();\n      setModalShow(true);\n    }\n  };\n\n  const confirmDeleteMajor = (e, majorId) => {\n    if (e) e.preventDefault();\n    confirmAlert({\n      title: \"Confirm to submit\",\n      message: \"Bạn có muốn xóa chuyên ngành này?\",\n      buttons: [\n        {\n          label: \"Đồng ý\",\n          onClick: () => confirmDeleteMajor(majorId),\n        },\n        {\n          label: \"Hủy bỏ\",\n        },\n      ],\n    });\n  };\n\n  //Delete new Major\n  const handleDeleteMajor = (majorId) => {\n    intakeService.get(majorId).then((res) => {\n      const listIntake = res.data;\n      for (let d = 0; d <= listIntake.length; d++) {\n        if (d < listIntake.length) {\n          intakeService\n            .remove(majorId, listIntake[d].id.intakeId)\n            .then((res) => {\n              if (res.data === 1) {\n                console.error(\"Delete intake error: \" + res.status);\n              }\n            });\n        } else {\n          majorService.remove(majorId).then((res) => {\n            if (res.status === 0) {\n              toast.success(\"Delete Major Success\");\n              loadData();\n            } else {\n              toast.error(res.message);\n            }\n          });\n        }\n      }\n    });\n  };\n\n  //   Add new major\n  const handleFormSubmit = () => {\n    if (majorId === 0) {\n      majorService\n        .add1(\n          formik.values.codeMajor,\n          formik.values.nameMajor,\n          formik.values.descriptionMajor,\n          \"Admin\"\n        )\n        .then((res) => {\n          if (res.status === 0) {\n            toast.success(\"Add new major success\");\n            loadData();\n            handleModalClose();\n          } else {\n            toast.error(\"Add major error, \" + res.message);\n          }\n        });\n    } else {\n      majorService\n        .updateMajor(\n          majorId,\n          formik.values.codeMajor,\n          formik.values.nameMajor,\n          formik.values.descriptionMajor,\n          \"Admin\"\n        )\n        .then((res) => {\n          if (res.status === 0) {\n            toast.success(\"Update Success\");\n            loadData();\n            handleModalClose();\n          } else {\n            toast.error(\"Update major error\");\n          }\n        })\n        .catch((error) => {\n          console.error(error);\n        });\n    }\n    loadData();\n  };\n\n  return (\n    <Fragment>\n      <div className=\"container-fluid\">\n        {/* <!-- start page title --> */}\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"page-title-box d-flex align-items-center justify-content-between\">\n              <h4 className=\"mb-0 font-size-18\">Major List</h4>\n\n              <div className=\"page-title-right\">\n                <ol className=\"breadcrumb m-0\">\n                  <li className=\"breadcrumb-item\">\n                    <a href=\"javascript: void(0);\">ISC Quang Trung</a>\n                  </li>\n                  <li className=\"breadcrumb-item active\">Management Majors</li>\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* <!-- end page title --> */}\n        {/* Table */}\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"row mb-2\">\n                  <div className=\"col-sm-4\">\n                    <div className=\"search-box mr-2 mb-2 d-inline-block\">\n                      <div className=\"position-relative\">\n                        <SearchMajor onSubmit={handedSearchChange} />\n                        <i className=\"bx bx-search-alt search-icon\" />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-8\">\n                    <div className=\"text-sm-right\">\n                      <button\n                        type=\"button\"\n                        onClick={() => handleModalShow(null, 0)}\n                        className=\"btn btn-success btn-rounded mb-2 mr-2\"\n                      >\n                        <i className=\"bx bxs-add-to-queue\" /> Add New Major\n                      </button>\n                    </div>\n                  </div>\n                </div>\n                <div className=\"table-responsive\">\n                  <table className=\"table table-centered table-nowrap\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th style={{ width: 10 }}>#</th>\n                        <th>Mã chuyên ngành</th>\n                        <th>Tên chuyên ngành</th>\n                        <th>Mô tả</th>\n                        {/* <th>Người tạo</th>\n                        <th>Ngày tạo</th>\n                        <th>Người cập nhật</th>\n                        <th>Ngày cập nhật</th> */}\n                        <th>Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {major.length == 0 ? (\n                        <tr className=\"text-center\">\n                          <td colspan=\"9\">\n                            Not found major with keyword: \"\n                            <strong>{filters.search}</strong>\"!\n                          </td>\n                        </tr>\n                      ) : (\n                        major.map((major, idx) => {\n                          return (\n                            <tr>\n                              <td>{idx + 1}</td>\n                              <td>\n                                <a\n                                  href=\"javascript: void(0);\"\n                                  className=\"text-body font-weight-bold\"\n                                >\n                                  {major.codeMajor}\n                                </a>{\" \"}\n                              </td>\n                              <td>{major.nameMajor}</td>\n                              <td>{major.descriptionMajor}</td>\n\n                              <td>\n                                <a\n                                  href=\"javascript:void(0);\"\n                                  onClick={(e) => handleModalShow(e, major.id)}\n                                  className=\"mr-3 text-primary\"\n                                >\n                                  <i className=\"fas fa-user-edit font-size-15\" />\n                                </a>\n                                <a\n                                  href=\"javascript:void(0);\"\n                                  onClick={(e) =>\n                                    confirmDeleteMajor(e, major.id)\n                                  }\n                                  className=\"text-danger\"\n                                >\n                                  <i className=\"far fa-trash-alt font-size-15\" />\n                                </a>\n                              </td>\n                            </tr>\n                          );\n                        })\n                      )}\n                    </tbody>\n                  </table>\n                </div>\n                <Pagination\n                  pagination={pagination}\n                  onPageChange={handlePageChange}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* Table */}\n      </div>\n\n      <Modal\n        show={modalShow}\n        onHide={handleModalClose}\n        backdrop=\"static\"\n        keyboard={false}\n        size=\"md\"\n      >\n        <Modal.Header closeButton>\n          {modalUpdate ? (\n            <Modal.Title>Update Major</Modal.Title>\n          ) : (\n            <Modal.Title>New Major</Modal.Title>\n          )}\n        </Modal.Header>\n        <form onSubmit={formik.handleSubmit} enctype=\"application/json\">\n          <Modal.Body>\n            <div className=\"row px-4\">\n              <Input\n                typeInput=\"1\"\n                column=\"12\"\n                rows=\"1\"\n                id=\"codeMajor\"\n                name=\"codeMajor\"\n                type=\"text\"\n                label=\"Major code *\"\n                frmField={formik.getFieldProps(\"codeMajor\")}\n                err={formik.touched.codeMajor && formik.errors.codeMajor}\n                errMessage={formik.errors.codeMajor}\n                value={formik.values.codeMajor}\n                onChange={formik.handleChange}\n              />\n\n              <Input\n                typeInput=\"1\"\n                column=\"12\"\n                rows=\"1\"\n                id=\"nameMajor\"\n                name=\"nameMajor\"\n                type=\"text\"\n                label=\"Major name *\"\n                frmField={formik.getFieldProps(\"nameMajor\")}\n                err={formik.touched.nameMajor && formik.errors.nameMajor}\n                errMessage={formik.errors.nameMajor}\n                value={formik.values.nameMajor}\n                onChange={formik.handleChange}\n              />\n\n              <Input\n                typeInput=\"1\"\n                column=\"12\"\n                rows=\"2\"\n                id=\"descriptionMajor\"\n                name=\"descriptionMajor\"\n                type=\"text\"\n                label=\"Major description *\"\n                frmField={formik.getFieldProps(\"descriptionMajor\")}\n                err={\n                  formik.touched.descriptionMajor &&\n                  formik.errors.descriptionMajor\n                }\n                errMessage={formik.errors.descriptionMajor}\n                value={formik.values.descriptionMajor}\n                onChange={formik.handleChange}\n              />\n\n              {modalUpdate ? (\n                <Fragment>\n                  <Input\n                    typeInput=\"1\"\n                    column=\"6\"\n                    rows=\"1\"\n                    readOnly\n                    type=\"text\"\n                    label=\"Người tạo\"\n                    value={`${formik.values.createdBy} - ${new Date(\n                      formik.values.createdDate\n                    ).toLocaleDateString(\"vi-VI\", {\n                      year: \"numeric\",\n                      month: \"numeric\",\n                      day: \"numeric\",\n                      hour: \"2-digit\",\n                      minute: \"2-digit\",\n                    })}`}\n                  />\n                  {formik.values.updatedBy != null ? (\n                    <Fragment>\n                      <Input\n                        typeInput=\"1\"\n                        column=\"6\"\n                        rows=\"1\"\n                        readOnly\n                        type=\"text\"\n                        label=\"Người cập nhật\"\n                        value={`${formik.values.updatedBy} - ${new Date(\n                          formik.values.createdDate\n                        ).toLocaleDateString(\"vi-VI\", {\n                          year: \"numeric\",\n                          month: \"numeric\",\n                          day: \"numeric\",\n                          hour: \"2-digit\",\n                          minute: \"2-digit\",\n                        })}`}\n                      />\n                    </Fragment>\n                  ) : (\n                    \"\"\n                  )}\n                </Fragment>\n              ) : (\n                \"\"\n              )}\n            </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleModalClose}>\n              Close\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Save\n            </Button>\n          </Modal.Footer>\n        </form>\n      </Modal>\n    </Fragment>\n  );\n};\n\nexport default Major;\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\majorService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\paginationIntake.jsx",["314","315","316","317","318","319","320","321","322","323"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nPagination.propTypes = {\n  pagination: PropTypes.object.isRequired,\n  onPageChange: PropTypes.func,\n};\n\nPagination.defaultProps = {\n  onPageChange: null,\n};\n\nfunction Pagination(props) {\n  const { pagination, onPageChange } = props;\n  const { page, size, totalRows } = pagination;\n  const totalPage = Math.ceil(totalRows / size);\n\n  function handlePageChange(newPage) {\n    if (onPageChange) {\n      onPageChange(newPage);\n    }\n  }\n  return (\n    <div>\n      <ul className=\"pagination pagination-rounded justify-content-end mb-2\">\n        <div className=\"mt-1 mr-2 mr-auto\">\n          Total <strong>{totalRows}</strong> Intake\n        </div>\n        {page == 0 ? (\n          <li className=\"page-item disabled\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page - 1)}\n            >\n              <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n            </a>\n          </li>\n        ) : (\n          <li className=\"page-item \">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page - 1)}\n            >\n              <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n            </a>\n          </li>\n        )}\n\n        <li className=\"page-item py-1 px-2 active text-dark\">\n          Trang {page + 1}/{totalPage}\n        </li>\n\n        {page == totalPage - 1 ? (\n          <li className=\"page-item disabled\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page + 1)}\n            >\n              <i class=\"fas fa-chevron-right\"></i>\n            </a>\n          </li>\n        ) : (\n          <li className=\"page-item\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page + 1)}\n            >\n              <i class=\"fas fa-chevron-right\"></i>\n            </a>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Pagination;\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Intake\\searchIntake.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\searchMajor.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Major\\paginationMajor.jsx",["324","325","326","327","328","329","330","331","332","333"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nPagination.propTypes = {\n  pagination: PropTypes.object.isRequired,\n  onPageChange: PropTypes.func,\n};\n\nPagination.defaultProps = {\n  onPageChange: null,\n};\n\nfunction Pagination(props) {\n  const { pagination, onPageChange } = props;\n  const { page, size, totalRows } = pagination;\n  const totalPage = Math.ceil(totalRows / size);\n\n  function handlePageChange(newPage) {\n    if (onPageChange) {\n      onPageChange(newPage);\n    }\n  }\n  return (\n    <div>\n      <ul className=\"pagination pagination-rounded justify-content-end mb-2\">\n        <div className=\"mt-1 mr-2 mr-auto\">\n          Total <strong>{totalRows}</strong> Major\n        </div>\n        {page == 0 ? (\n          <li className=\"page-item disabled\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page - 1)}\n            >\n              <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n            </a>\n          </li>\n        ) : (\n          <li className=\"page-item \">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page - 1)}\n            >\n              <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n            </a>\n          </li>\n        )}\n\n        <li className=\"page-item py-1 px-2 active text-dark\">\n          Trang {page + 1}/{totalPage}\n        </li>\n\n        {page == totalPage - 1 ? (\n          <li className=\"page-item disabled\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page + 1)}\n            >\n              <i class=\"fas fa-chevron-right\"></i>\n            </a>\n          </li>\n        ) : (\n          <li className=\"page-item\">\n            <a\n              className=\"page-link\"\n              href=\"javascript: void(0);\"\n              onClick={() => handlePageChange(page + 1)}\n            >\n              <i class=\"fas fa-chevron-right\"></i>\n            </a>\n          </li>\n        )}\n      </ul>\n    </div>\n  );\n}\n\nexport default Pagination;\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\University\\university.jsx",["334","335","336","337","338","339"],"import { Fragment } from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport universityService from \"../../Services/universityService\";\r\nimport Input from \"../../Controls/input\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport moment from \"moment\";\r\nimport Pagination from \"../../Controls/pagination\";\r\n//import ReactPaginate from 'react-paginate';\r\ntoast.configure({\r\n  autoClose: 2000,\r\n  position: \"top-right\",\r\n  newestOnTop: true,\r\n  pauseOnHover: true,\r\n  closeOnClick: true,\r\n});\r\nconst University = (props) => {\r\n  const [university, setUniversity] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const handleModalClose = () => setModalShow(false);\r\n  const [uniId, setUniId] = useState(0);\r\n  //const [pagi, setPagi] = React.useState({ activePage: 1 });\r\n  const [modalUpdate, setModalUpdate] = useState(false);\r\n\r\n  //pagination\r\n\r\n  //load data\r\n  const loadData = () => {\r\n    // universityService.getAll().then((res) => {\r\n    //   if (res.status === 0) {\r\n    //     setUniversity(res.data);\r\n    //   } else {\r\n    //   }\r\n    // });\r\n    handlePagination();\r\n  };\r\n  //pagination\r\n  const [pagination, setPagination] = useState({\r\n    page: 2,\r\n    size: 1,\r\n    key: \"\",\r\n    totalElements: 1,\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    size: 5,\r\n    page: 0,\r\n    key: \"\",\r\n  });\r\n\r\n  const handlePagination = () => {\r\n    universityService\r\n      .pagination(filters.page, filters.size, filters.key)\r\n      .then((res) => {\r\n        if (res.status === 0) {\r\n          let sizeP = res.data[0].size;\r\n          let totalElementsP = res.data[0].totalElements;\r\n          let pageP = res.data[0].pageable.pageNumber;\r\n          let keyP = res.data[0].key;\r\n          let dataP = res.data[0].content;\r\n          setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n          setUniversity(dataP);\r\n        }\r\n      });\r\n  };\r\n  const handlePageChange = (newPage) => {\r\n    setFilters({\r\n      ...filters,\r\n      page: newPage,\r\n    });\r\n  };\r\n\r\n  const handleFormSubmit = (data) => {\r\n    if (uniId === 0) {\r\n      universityService.add(data).then((res) => {\r\n        if (res.status === 0) {\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"Add new success\");\r\n        } else {\r\n          toast.error(\"Add new error\");\r\n        }\r\n      });\r\n    } else {\r\n      universityService.update(uniId, data).then((res) => {\r\n        if (res.status === 0) {\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"Update success\");\r\n        } else {\r\n          toast.success(\"Update error\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      nameUni: \"\",\r\n      addressUni: \"\",\r\n      contactPerson: \"\",\r\n      websiteUni: \"\",\r\n      noteUni: \"\",\r\n      createdBy: \"\",\r\n      updatedBy: \"\",\r\n      createdDate: \"\",\r\n      updatedDate: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      nameUni: Yup.string()\r\n        .required(\"Required\")\r\n        .max(100, \"Less than 100 characters\")\r\n        .nullable(false),\r\n      addressUni: Yup.string().required(\"Required\"),\r\n      contactPerson: Yup.string()\r\n        .required(\"Required\")\r\n        .max(150, \"Less than 150 characters\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) e.preventDefault();\r\n    setUniId(dataId);\r\n    if (dataId > 0) {\r\n      setModalUpdate(true);\r\n      universityService.get(dataId).then((res) => {\r\n        formik.setValues(res.data[0]);\r\n        setModalShow(true);\r\n      });\r\n    } else {\r\n      setModalUpdate(false);\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n  const submitDelete = (e, dataId) => {\r\n    confirmAlert({\r\n      title: \"WARNING!\",\r\n      message: \"Are you sure to delete this?  \",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => deleteRow(e, dataId),\r\n        },\r\n        {\r\n          label: \"No\",\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    universityService.remove(dataId).then((res) => {\r\n      if (res.status === 0) {\r\n        loadData();\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  const [key, setKey] = useState(\"\");\r\n  const searchRoom = (e, key) => {\r\n    e.preventDefault();\r\n    universityService\r\n      .pagination(filters.page, filters.size, key)\r\n      .then((res) => {\r\n        if (res.status === 0) {\r\n          let sizeP = res.data[0].size;\r\n          let totalElementsP = res.data[0].totalElements;\r\n          let pageP = res.data[0].pageable.pageNumber;\r\n          let keyP = res.data[0].key;\r\n          let dataP = res.data[0].content;\r\n          setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n          setUniversity(dataP);\r\n          console.log(dataP);\r\n        } else {\r\n          setUniversity([]);\r\n        }\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    document.title = \"University - ISC Quang Trung Management\";\r\n  }, [filters]);\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n            <h4 className=\"mb-0 font-size-18\">University List</h4>\r\n            <div className=\"page-title-right\">\r\n              <ol className=\"breadcrumb m-0\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <a href=\"#\">ISC Quang Trung</a>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">University List</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* end page title */}\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-4\">\r\n                  <div className=\"search-box mr-2 mb-2 d-inline-block\">\r\n                    <div className=\"position-relative\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Tìm kiếm...\"\r\n                        onChange={(e) => setKey(e.target.value)}\r\n                        onKeyUp={(e) => searchRoom(e, key)}\r\n                      />\r\n                      <i className=\"bx bx-search-alt search-icon\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"text-sm-right\">\r\n                    <button\r\n                      type=\"button\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\".addStudentModal\"\r\n                      className=\"btn btn-success btn-rounded waves-effect waves-light mb-2 mr-2\"\r\n                      onClick={() => handleModalShow(null, 0)}\r\n                    >\r\n                      <i className=\"bx bxs-add-to-queue\" /> Add new University\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                {/* end col*/}\r\n              </div>\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-centered table-nowrap\">\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>University Name</th>\r\n                      <th>Address</th>\r\n                      <th>Website</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {university.map((university, idx) => {\r\n                      return (\r\n                        <tr key={university.id}>\r\n                          <td>{idx + 1}</td>\r\n                          <td>\r\n                            <a href=\"#\" className=\"text-body font-weight-bold\">\r\n                              {university.nameUni}\r\n                            </a>{\" \"}\r\n                          </td>\r\n                          <td>{university.addressUni}</td>\r\n                          <td>{university.websiteUni}</td>\r\n                          <td>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"mr-3 text-primary\"\r\n                              onClick={(e) => handleModalShow(e, university.id)}\r\n                            >\r\n                              <i className=\"fas fa-user-edit font-size-18\" />\r\n                            </a>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"text-danger\"\r\n                              onClick={(e) => submitDelete(e, university.id)}\r\n                            >\r\n                              <i className=\"far fa-trash-alt font-size-18\" />\r\n                            </a>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <Pagination\r\n                pagination={pagination}\r\n                onPageChange={handlePageChange}\r\n              />\r\n            </div>\r\n            <Modal\r\n              show={modalShow}\r\n              onHide={handleModalClose}\r\n              backdropClassName=\"static\"\r\n              keyboard={false}\r\n              size=\"lg\"\r\n            >\r\n              <Modal.Header closeButton>\r\n                {modalUpdate ? (\r\n                  <Modal.Title>Update university</Modal.Title>\r\n                ) : (\r\n                  <Modal.Title>Add new university</Modal.Title>\r\n                )}\r\n              </Modal.Header>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <Modal.Body>\r\n                  <div className=\"row px-3\">\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"1\"\r\n                        id=\"txtName\"\r\n                        type=\"text\"\r\n                        label=\"Name university *\"\r\n                        size=\"50px\"\r\n                        frmField={formik.getFieldProps(\"nameUni\")}\r\n                        err={formik.touched.nameUni && formik.errors.nameUni}\r\n                        errMessage={formik.errors.nameUni}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"1\"\r\n                        id=\"txtAdd\"\r\n                        type=\"text\"\r\n                        label=\"Address university *\"\r\n                        frmField={formik.getFieldProps(\"addressUni\")}\r\n                        err={\r\n                          formik.touched.addressUni && formik.errors.addressUni\r\n                        }\r\n                        errMessage={formik.errors.addressUni}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtWeb\"\r\n                        type=\"text\"\r\n                        label=\"Website\"\r\n                        frmField={formik.getFieldProps(\"websiteUni\")}\r\n                        err={\r\n                          formik.touched.websiteUni && formik.errors.websiteUni\r\n                        }\r\n                        errMessage={formik.errors.websiteUni}\r\n                      />\r\n                      \r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtConP\"\r\n                        type=\"text\"\r\n                        label=\"Contact Person *\"\r\n                        frmField={formik.getFieldProps(\"contactPerson\")}\r\n                        err={\r\n                          formik.touched.contactPerson &&\r\n                          formik.errors.contactPerson\r\n                        }\r\n                        errMessage={formik.errors.contactPerson}\r\n                      />\r\n\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"2\"\r\n                        id=\"txtNote\"\r\n                        type=\"text\"\r\n                        label=\"Note\"\r\n                        frmField={formik.getFieldProps(\"noteUni\")}\r\n                        err={formik.touched.noteUni && formik.errors.noteUni}\r\n                        errMessage={formik.errors.noteUni}\r\n                      />\r\n\r\n                      {modalUpdate ? (\r\n                        <Fragment>\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"6\"\r\n                          rows=\"1\"\r\n                          readOnly\r\n                          type=\"text\"\r\n                          label=\"Created by\"\r\n                          value = {`${formik.values.createdBy} - ${new Date(formik.values.createdDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                        />\r\n                          {formik.values.updatedBy != null ?(\r\n                          <Fragment>\r\n                            <Input\r\n                            typeInput=\"1\"\r\n                            column=\"6\"\r\n                            rows=\"1\"\r\n                            readOnly\r\n                            type=\"text\"\r\n                            label=\"Update by\"\r\n                            value = {`${formik.values.updatedBy} - ${new Date(formik.values.updatedDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                            />\r\n                          </Fragment>\r\n                          ):(\"\")}\r\n                        </Fragment>\r\n                      ) : (\"\")}\r\n                  </div>\r\n                </Modal.Body>\r\n                <div className=\"row justify-content-end small\">\r\n                  <div className=\"col-auto pr-5\">\r\n                    <p className=\"p-0\">\r\n                     Field required (<span className=\"text-danger\">*</span>)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <Modal.Footer>\r\n                  <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                    Hủy\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Lưu\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </form>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default University;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Company\\company.jsx",["340","341","342","343","344","345"],"import { Fragment } from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport companyService from \"../../Services/companyService\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useFormik } from \"formik\";\r\nimport Input from \"../../Controls/input\";\r\nimport * as Yup from \"yup\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport moment from \"moment\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport Pagination from \"../../Controls/pagination\";\r\n//import ModalCompany from \"./modalCompany\";\r\nconst Company = (props) => {\r\n  const [company, setCompany] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const handleModalClose = () => setModalShow(false);\r\n  const [comId, setComId] = useState(0);\r\n\r\n  const [modalUpdate, setModalUpdate] = useState(false);\r\n\r\n  //load data\r\n  const loadData = () => {\r\n    // companyService.getAll().then((res) => {\r\n    //   if (res.status === 0) {\r\n    //     setCompany(res.data);\r\n    //   }\r\n    // });\r\n    handlePagination();\r\n  };\r\n\r\n  //pagination\r\n  const [pagination, setPagination] = useState({\r\n    page: 2,\r\n    size: 5,\r\n    key: \"\",\r\n    totalElements: 1,\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    size: 5,\r\n    page: 0,\r\n    key: \"\",\r\n  });\r\n\r\n  const handlePagination = () => {\r\n    companyService\r\n      .pagination(filters.page, filters.size, filters.key)\r\n      .then((res) => {\r\n        if (res.status === 0) {\r\n          let sizeP = res.data[0].size;\r\n          let totalElementsP = res.data[0].totalElements;\r\n          let pageP = res.data[0].pageable.pageNumber;\r\n          let dataP = res.data[0].content;\r\n          let keyP = res.data[0].key;\r\n          setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n          setCompany(dataP);\r\n        }\r\n      });\r\n  };\r\n  const handlePageChange = (newPage) => {\r\n    setFilters({\r\n      ...filters,\r\n      page: newPage,\r\n    });\r\n  };\r\n\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) e.preventDefault();\r\n    setComId(dataId);\r\n    if (dataId > 0) {\r\n      setModalUpdate(true);\r\n      companyService.get(dataId).then((res) => {\r\n        setModalShow(true);\r\n        formik.setValues(res.data[0]);\r\n      });\r\n    } else {\r\n      setModalUpdate(false);\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      nameCom: \"\",\r\n      addresCom: \"\",\r\n      contactPerson: \"\",\r\n      websiteCom: \"\",\r\n      noteCom: \"\",\r\n      statusCom: \"\",\r\n      createdBy: \"\",\r\n      updatedBy: \"\",\r\n      createdDate: \"\",\r\n      updatedDate: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      nameCom: Yup.string().required(\"Required\"),\r\n      addresCom: Yup.string().required(\"Required\"),\r\n      statusCom: Yup.string().required(\"Required\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  const handleFormSubmit = (data) => {\r\n    if (comId === 0) {\r\n      companyService.add(data).then((res) => {\r\n        if (res.status === 0) {\r\n          //formik.setValues(res.data);\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"THÊM THÀNH CÔNG\");\r\n        } else {\r\n          toast.error(\"DỮ LIỆU KHÔNG HỢP LỆ\");\r\n        }\r\n      });\r\n    } else {\r\n      companyService.update(comId, data).then((res) => {\r\n        if (res.status === 0) {\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"CẬP NHẬT THÀNH CÔNG\");\r\n        } else {\r\n          toast.success(\"CẬP NHẬT THẤT BẠI\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    companyService.remove(dataId).then((res) => {\r\n      if (res.status === 0) {\r\n        loadData();\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n  const submitDelete = (e, dataId) => {\r\n    confirmAlert({\r\n      title: \"WARNING!\",\r\n      message: \"Are you sure to delete this?\",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => deleteRow(e, dataId),\r\n        },\r\n        {\r\n          label: \"No\",\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  //load search\r\n  const [key, setKey] = useState(\"\");\r\n  const searchRoom = (e, key) => {\r\n    e.preventDefault();\r\n    companyService.pagination(filters.page, filters.size, key).then((res) => {\r\n      if (res.status === 0) {\r\n        let sizeP = res.data[0].size;\r\n        let totalElementsP = res.data[0].totalElements;\r\n        let pageP = res.data[0].pageable.pageNumber;\r\n        let keyP = res.data[0].key;\r\n        let dataP = res.data[0].content;\r\n        setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n        setCompany(dataP);\r\n      } else {\r\n        setCompany([]);\r\n      }\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n    document.title = \"Companies - ISC Quang Trung Management\";\r\n  }, [filters]);\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n            <h4 className=\"mb-0 font-size-18\">List Company</h4>\r\n            <div className=\"page-title-right\">\r\n              <ol className=\"breadcrumb m-0\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <a href=\"#\">ISC Quang Trung</a>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">List Company</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* end page title */}\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-4\">\r\n                  <div className=\"search-box mr-2 mb-2 d-inline-block\">\r\n                    <div className=\"position-relative\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Tìm kiếm...\"\r\n                        // onKeyDown={(e) => searchRoom(e, key)}\r\n                        onChange={(e) => setKey(e.target.value)}\r\n                        onKeyUp={(e) => searchRoom(e, key)}\r\n                      />\r\n                      <i className=\"bx bx-search-alt search-icon\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"text-sm-right\">\r\n                    <button\r\n                      type=\"button\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\".addStudentModal\"\r\n                      className=\"btn btn-success btn-rounded waves-effect waves-light mb-2 mr-2\"\r\n                      onClick={() => handleModalShow(null, 0)}\r\n                    >\r\n                      <i className=\"bx bxs-add-to-queue\" /> Add new Company\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                {/* end col*/}\r\n              </div>\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-centered table-nowrap\">\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>Company Name</th>\r\n                      <th>Address</th>\r\n                      <th>Contact Person</th>\r\n                      <th>Website</th>\r\n                      <th>Status</th>\r\n                      <th></th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {company.map((company, idx) => {\r\n                      return (\r\n                        <tr key={company.id}>\r\n\r\n                          <td>{idx + 1}</td>\r\n                          <td>\r\n                            <a href=\"#\" className=\"text-body font-weight-bold\">\r\n                              {company.nameCom}\r\n                            </a>{\" \"}\r\n                          </td>\r\n                          <td>{company.addresCom}</td>\r\n                          <td>{company.contactPerson}</td>\r\n                          <td>{company.websiteCom}</td>\r\n                          <td>\r\n                            <span className=\"badge badge-pill badge-soft-success font-size-12\">\r\n                              Active\r\n                              {/* {company.statusCom} */}\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"mr-3 text-primary\"\r\n                              onClick={(e) => handleModalShow(e, company.id)}\r\n                            >\r\n                              <i className=\"fas fa-user-edit font-size-18\" />\r\n                            </a>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"text-danger\"\r\n                              onClick={(e) => submitDelete(e, company.id)}\r\n                            >\r\n                              <i className=\"far fa-trash-alt font-size-18\" />\r\n                            </a>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <Pagination\r\n                pagination={pagination}\r\n                onPageChange={handlePageChange}\r\n              />\r\n            </div>\r\n            <Modal\r\n              show={modalShow}\r\n              onHide={handleModalClose}\r\n              backdropClassName=\"static\"\r\n              keyboard={false}\r\n              size=\"lg\"\r\n            >\r\n              <Modal.Header closeButton>\r\n                {modalUpdate ? (\r\n                  <Modal.Title>Update Company</Modal.Title>\r\n                ) : (\r\n                  <Modal.Title>Add new Company</Modal.Title>\r\n                )}\r\n              </Modal.Header>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <Modal.Body>\r\n                  <div className=\"row px-3\">\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"1\"\r\n                        id=\"txtName\"\r\n                        type=\"text\"\r\n                        label=\"Name Company\"\r\n                        frmField={formik.getFieldProps(\"nameCom\")}\r\n                        err={formik.touched.nameCom && formik.errors.nameCom}\r\n                        errMessage={formik.errors.nameCom}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtAdd\"\r\n                        type=\"text\"\r\n                        label=\"Address\"\r\n                        frmField={formik.getFieldProps(\"addresCom\")}\r\n                        err={\r\n                          formik.touched.addresCom && formik.errors.addresCom\r\n                        }\r\n                        errMessage={formik.errors.addresCom}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtStatus\"\r\n                        type=\"text\"\r\n                        label=\"Status\"\r\n                        frmField={formik.getFieldProps(\"statusCom\")}\r\n                        err={\r\n                          formik.touched.statusCom && formik.errors.statusCom\r\n                        }\r\n                        errMessage={formik.errors.statusCom}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtWeb\"\r\n                        type=\"text\"\r\n                        label=\"Website\"\r\n                        frmField={formik.getFieldProps(\"websiteCom\")}\r\n                        err={\r\n                          formik.touched.websiteCom && formik.errors.websiteCom\r\n                        }\r\n                        errMessage={formik.errors.websiteCom}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtConP\"\r\n                        type=\"text\"\r\n                        label=\"Contact Person\"\r\n                        frmField={formik.getFieldProps(\"contactPerson\")}\r\n                        err={\r\n                          formik.touched.contactPerson &&\r\n                          formik.errors.contactPerson\r\n                        }\r\n                        errMessage={formik.errors.contactPerson}\r\n                      />\r\n                      {modalUpdate ? (\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"6\"\r\n                          rows=\"1\"\r\n                          id=\"txtNote\"\r\n                          type=\"text\"\r\n                          label=\"Ghi chú\"\r\n                          frmField={formik.getFieldProps(\"noteCom\")}\r\n                          err={formik.touched.noteCom && formik.errors.noteCom}\r\n                          errMessage={formik.errors.noteCom}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {modalUpdate ? (\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"6\"\r\n                          rows=\"1\"\r\n                          id=\"txtUpdatedBy\"\r\n                          type=\"text\"\r\n                          label=\"Người cập nhật\"\r\n                          frmField={formik.getFieldProps(\"updatedBy\")}\r\n                          err={\r\n                            formik.touched.updatedBy && formik.errors.updatedBy\r\n                          }\r\n                          errMessage={formik.errors.updatedBy}\r\n                        />\r\n                      ) : (\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"12\"\r\n                          rows=\"2\"\r\n                          id=\"txtNote\"\r\n                          type=\"text\"\r\n                          label=\"Note\"\r\n                          frmField={formik.getFieldProps(\"noteCom\")}\r\n                          err={formik.touched.noteCom && formik.errors.noteCom}\r\n                          errMessage={formik.errors.noteCom}\r\n                        />\r\n                      )}\r\n\r\n                   {modalUpdate ? (\r\n                    <Fragment>\r\n                    <Input\r\n                      typeInput=\"1\"\r\n                      column=\"6\"\r\n                      rows=\"1\"\r\n                      readOnly\r\n                      type=\"text\"\r\n                      label=\"Created by\"\r\n                      value = {`${formik.values.createdBy} - ${new Date(formik.values.createdDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                      />\r\n                      {formik.values.updatedBy != null ?(\r\n                      <Fragment>\r\n                      <Input\r\n                      typeInput=\"1\"\r\n                      column=\"6\"\r\n                      rows=\"1\"\r\n                      readOnly\r\n                      type=\"text\"\r\n                      label=\"Update by\"\r\n                      value = {`${formik.values.updatedBy} - ${new Date(formik.values.updatedDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n                      />\r\n                      </Fragment>\r\n                      ):(\"\")}\r\n                    </Fragment>\r\n                  ) : (\"\")}\r\n\r\n                  </div>\r\n                </Modal.Body>\r\n                <div className=\"row justify-content-end small\">\r\n                  <div className=\"col-auto pr-5\">\r\n                    <p className=\"p-0\">\r\n                    Field required (<span className=\"text-danger\">*</span>)\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <Modal.Footer>\r\n                  <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                    Hủy\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Lưu\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </form>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Company;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Room\\room.jsx",["346","347","348","349","350","351","352"],"import { Fragment } from \"react\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport roomService from \"../../Services/roomService\";\r\nimport Input from \"../../Controls/input\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useFormik } from \"formik\";\r\nimport Select from \"../../Controls/select\";\r\nimport * as Yup from \"yup\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport moment from \"moment\";\r\nimport Pagination from \"../../Controls/pagination\";\r\nconst Room = (props) => {\r\n  const [room, setRoom] = useState([]);\r\n  const [modalShow, setModalShow] = useState(false);\r\n  const handleModalClose = () => setModalShow(false);\r\n  const [roomId, setRoomId] = useState(0);\r\n  const [modalUpdate, setModalUpdate] = useState(false);\r\n  //load data\r\n  const loadData = () => {\r\n    // roomService.getAll().then((res) => {\r\n    //   if (res.status === 0) {\r\n    //     setRoom(res.data);\r\n    //   }\r\n    // });\r\n    handlePagination();\r\n  };\r\n  //pagination\r\n  const [pagination, setPagination] = useState({\r\n    page: 2,\r\n    size: 5,\r\n    key: \"\",\r\n    totalElements: 1,\r\n  });\r\n  const [filters, setFilters] = useState({\r\n    size: 5,\r\n    page: 0,\r\n    key: \"\",\r\n  });\r\n\r\n  const handlePagination = () => {\r\n    roomService\r\n      .pagination(filters.page, filters.size, filters.key)\r\n      .then((res) => {\r\n        if (res.status === 0) {\r\n          let sizeP = res.data[0].size;\r\n          let totalElementsP = res.data[0].totalElements;\r\n          let pageP = res.data[0].pageable.pageNumber;\r\n          let keyP = res.data[0].key;\r\n          let dataP = res.data[0].content;\r\n          setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n          setRoom(dataP);\r\n        }\r\n      });\r\n  };\r\n  const handlePageChange = (newPage) => {\r\n    setFilters({\r\n      ...filters,\r\n      page: newPage,\r\n    });\r\n  };\r\n\r\n  const handleModalShow = (e, dataId) => {\r\n    if (e) e.preventDefault();\r\n    setRoomId(dataId);\r\n    if (dataId > 0) {\r\n      setModalUpdate(true);\r\n      roomService.get(dataId).then((res) => {\r\n        setModalShow(true);\r\n        console.log(formik.values.statusRoom);\r\n        formik.setValues(res.data[0]);\r\n      });\r\n    } else {\r\n      setModalUpdate(false);\r\n      formik.resetForm();\r\n      setModalShow(true);\r\n    }\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      codeRoom: \"\",\r\n      nameRoom: \"\",\r\n      typeRoom: \"\",\r\n      statusRoom: \"0\",\r\n      noteRoom: \"\",\r\n      createdBy: \"\",\r\n      updatedBy: \"\",\r\n      createdDate: \"\",\r\n      updatedDate: \"\",\r\n    },\r\n    validationSchema: Yup.object({\r\n      codeRoom: Yup.string()\r\n        .required(\"Required\")\r\n        .max(50, \"Less than 50 characters\"),\r\n      nameRoom: Yup.string()\r\n        .required(\"Required\")\r\n        .max(50, \"Less than 50 characters\"),\r\n      typeRoom: Yup.string().required(\"Required\"),\r\n      noteRoom: Yup.string().max(1000, \"Less than 1000 characters\"),\r\n    }),\r\n    onSubmit: (values) => {\r\n      handleFormSubmit(values);\r\n    },\r\n  });\r\n\r\n  const handleFormSubmit = (data) => {\r\n    if (roomId === 0) {\r\n      roomService.add(data).then((res) => {\r\n        if (res.status === 0) {\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"THÊM THÀNH CÔNG\");\r\n        } else {\r\n          toast.error(\"DỮ LIỆU KHÔNG HỢP LỆ\");\r\n        }\r\n      });\r\n    } else {\r\n      roomService.update(roomId, data).then((res) => {\r\n        if (res.status === 0) {\r\n          loadData();\r\n          handleModalClose();\r\n          toast.success(\"CẬP NHẬT THÀNH CÔNG\");\r\n        } else {\r\n          toast.success(\"CẬP NHẬT THẤT BẠI\");\r\n        }\r\n      });\r\n    }\r\n  };\r\n  const submitDelete = (e, dataId) => {\r\n    confirmAlert({\r\n      title: \"WARNING!\",\r\n      message: \"Are you sure to delete this?  \",\r\n      buttons: [\r\n        {\r\n          label: \"Yes\",\r\n          onClick: () => deleteRow(e, dataId),\r\n        },\r\n        {\r\n          label: \"No\",\r\n        },\r\n      ],\r\n    });\r\n  };\r\n  const deleteRow = (e, dataId) => {\r\n    e.preventDefault();\r\n    roomService.remove(dataId).then((res) => {\r\n      if (res.status === 0) {\r\n        loadData();\r\n      } else {\r\n      }\r\n    });\r\n  };\r\n\r\n  //load search\r\n\r\n  const [key, setKey] = useState(\"\");\r\n  const searchRoom = (e, key) => {\r\n    e.preventDefault();\r\n    roomService.pagination(filters.page, filters.size, key).then((res) => {\r\n      if (res.status === 0) {\r\n        let sizeP = res.data[0].size;\r\n        let totalElementsP = res.data[0].totalElements;\r\n        let pageP = res.data[0].pageable.pageNumber;\r\n        let keyP = res.data[0].key;\r\n        let dataP = res.data[0].content;\r\n        setPagination({ pageP, sizeP, keyP, totalElementsP });\r\n        setRoom(dataP);\r\n      } else {\r\n        setRoom([]);\r\n      }\r\n    });\r\n  };\r\n  useEffect(() => {\r\n    loadData();\r\n    document.title = \"Rooms - ISC Quang Trung Management\";\r\n  }, [filters]);\r\n  return (\r\n    <Fragment>\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n            <h4 className=\"mb-0 font-size-18\">Rooms List</h4>\r\n            <div className=\"page-title-right\">\r\n              <ol className=\"breadcrumb m-0\">\r\n                <li className=\"breadcrumb-item\">\r\n                  <a href=\"#\">ISC Quang Trung</a>\r\n                </li>\r\n                <li className=\"breadcrumb-item active\">Rooms List</li>\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* end page title */}\r\n      <div className=\"row\">\r\n        <div className=\"col-12\">\r\n          <div className=\"card\">\r\n            <div className=\"card-body\">\r\n              <div className=\"row mb-2\">\r\n                <div className=\"col-sm-4\">\r\n                  <div className=\"search-box mr-2 mb-2 d-inline-block\">\r\n                    <div className=\"position-relative\">\r\n                      <input\r\n                        type=\"text\"\r\n                        className=\"form-control\"\r\n                        placeholder=\"Tìm kiếm...\"\r\n                        onChange={(e) => setKey(e.target.value)}\r\n                        onKeyUp={(e) => searchRoom(e, key)}\r\n                      />\r\n                      <i className=\"bx bx-search-alt search-icon\" />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"col-sm-8\">\r\n                  <div className=\"text-sm-right\">\r\n                    <button\r\n                      type=\"button\"\r\n                      data-toggle=\"modal\"\r\n                      data-target=\".addStudentModal\"\r\n                      className=\"btn btn-success btn-rounded waves-effect waves-light mb-2 mr-2\"\r\n                      onClick={() => handleModalShow(null, 0)}\r\n                    >\r\n                      <i className=\"bx bxs-add-to-queue\" /> Add new room\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                {/* end col*/}\r\n              </div>\r\n              <div className=\"table-responsive\">\r\n                <table className=\"table table-centered table-nowrap\">\r\n                  <thead className=\"thead-light\">\r\n                    <tr>\r\n                      <th>#</th>\r\n                      <th>Code</th>\r\n                      <th>Name</th>\r\n                      <th>Type</th>\r\n                      <th>Status</th>\r\n                      <th>Active</th>\r\n                    </tr>\r\n                  </thead>\r\n                  <tbody>\r\n                    {room.map((room, idx) => {\r\n                      return (\r\n                        <tr key={room.id}>\r\n                          <td>{idx + 1}</td>\r\n                          <td>\r\n                            <a href=\"#\" className=\"text-body font-weight-bold\">\r\n                              {room.codeRoom}\r\n                            </a>{\" \"}\r\n                          </td>\r\n                          <td>{room.nameRoom}</td>\r\n                          <td>{room.typeRoom}</td>\r\n                          <td>\r\n                            <span className=\"badge badge-pill badge-soft-success font-size-12\">\r\n                              {room.statusRoom}\r\n                            </span>\r\n                          </td>\r\n                          <td>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"mr-3 text-primary\"\r\n                              onClick={(e) => handleModalShow(e, room.id)}\r\n                            >\r\n                              <i className=\"fas fa-user-edit font-size-18\" />\r\n                            </a>\r\n                            <a\r\n                              href=\"#\"\r\n                              className=\"text-danger\"\r\n                              onClick={(e) => submitDelete(e, room.id)}\r\n                            >\r\n                              <i className=\"far fa-trash-alt font-size-18\" />\r\n                            </a>\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                  </tbody>\r\n                </table>\r\n              </div>\r\n              <Pagination\r\n                pagination={pagination}\r\n                onPageChange={handlePageChange}\r\n              />\r\n            </div>\r\n            <Modal\r\n              show={modalShow}\r\n              onHide={handleModalClose}\r\n              backdropClassName=\"static\"\r\n              keyboard={false}\r\n              size=\"lg\"\r\n            >\r\n              <Modal.Header closeButton>\r\n                {modalUpdate ? (\r\n                  <Modal.Title>Update rooms</Modal.Title>\r\n                ) : (\r\n                  <Modal.Title>Add rooms</Modal.Title>\r\n                )}\r\n              </Modal.Header>\r\n              <form onSubmit={formik.handleSubmit}>\r\n                <Modal.Body>\r\n                  <div className=\"row px-3\">\r\n                  <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"1\"\r\n                        id=\"txtName\"\r\n                        type=\"text\"\r\n                        label=\"Name room *\"\r\n                        frmField={formik.getFieldProps(\"nameRoom\")}\r\n                        err={formik.touched.nameRoom && formik.errors.nameRoom}\r\n                        errMessage={formik.errors.nameRoom}\r\n                      />\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"6\"\r\n                        rows=\"1\"\r\n                        id=\"txtCode\"\r\n                        type=\"text\"\r\n                        label=\"Code room *\"\r\n                        name=\"codeRoom\"\r\n                        frmField={formik.getFieldProps(\"codeRoom\")}\r\n                        err={formik.touched.codeRoom && formik.errors.codeRoom}\r\n                        errMessage={formik.errors.codeRoom}\r\n                      />\r\n                      {modalUpdate ? (\r\n                            <div className=\"col-6\">\r\n                                <div className=\"form-group\">\r\n                                  <label htmlFor=\"setSelected\"> Status</label>\r\n                                      <Select\r\n                                        label=\"Type room *\"\r\n                                        name=\"type\"\r\n                                        id=\"typeRoom\"\r\n                                        value={formik.values.typeRoom}\r\n                                        frmField={formik.getFieldProps(\"typeRoom\")}\r\n                                      >\r\n                                        <option value={formik.values.typeRoom} hiden>\r\n                                          {formik.values.typeRoom}\r\n                                        </option>\r\n                                        {formik.values.typeRoom == \"Lab\" ? (\r\n                                          <option label=\"Theory\" value=\"Theory\">\r\n                                            Theory\r\n                                          </option>\r\n                                        ) : (\r\n                                          <option label=\"Lab\" value=\"Lab\">\r\n                                            {\" \"}\r\n                                            Lab\r\n                                          </option>\r\n                                        )}\r\n                                      </Select>\r\n                                    </div>\r\n                                </div>\r\n                      ) : (\r\n                        <div className=\"col-6\">\r\n                          <div className=\"form-group\">\r\n                          <Select\r\n                            label=\"Type room *\"\r\n                            name=\"type\"\r\n                            id=\"typeRoom\"\r\n                            value={formik.values.typeRoom}\r\n                            frmField={formik.getFieldProps(\"typeRoom\")}\r\n                            required\r\n                          >\r\n                            <option value=\"Lab\">Lab</option>\r\n                            <option value=\"Theory\">Theory</option>\r\n                          </Select>\r\n                            </div>\r\n                        </div>\r\n                      )}\r\n\r\n\r\n                      {modalUpdate ? (\r\n                        <Select\r\n                          label=\"Active\"\r\n                          name=\"status\"\r\n                          id=\"statusRoom\"\r\n                          value={formik.values.statusRoom}\r\n                          frmField={formik.getFieldProps(\"statusRoom\")}\r\n                        >\r\n                          <option value={formik.values.statusRoom} hiden>\r\n                            {formik.values.statusRoom}\r\n                          </option>\r\n                          {formik.values.statusRoom == \"Active\" ? (\r\n                            <option label=\"Inactive\" value=\"Inactive\">\r\n                              Inactive\r\n                            </option>\r\n                          ) : (\r\n                            <option label=\"Active\" value=\"Active\">\r\n                              Active\r\n                            </option>\r\n                          )}\r\n                        </Select>\r\n                      ) : (\"\")}\r\n                      <Input\r\n                        typeInput=\"1\"\r\n                        column=\"12\"\r\n                        rows=\"2\"\r\n                        id=\"txtNote\"\r\n                        type=\"text\"\r\n                        label=\"Note\"\r\n                        frmField={formik.getFieldProps(\"noteRoom\")}\r\n                        err={formik.touched.noteRoom && formik.errors.noteRoom}\r\n                        errMessage={formik.errors.noteRoom}\r\n                      />\r\n                      {modalUpdate ? (\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"6\"\r\n                          rows=\"1\"\r\n                          id=\"txtUpdatedBy\"\r\n                          type=\"text\"\r\n                          label=\"Người cập nhật\"\r\n                          frmField={formik.getFieldProps(\"updatedBy\")}\r\n                          err={\r\n                            formik.touched.updatedBy && formik.errors.updatedBy\r\n                          }\r\n                          errMessage={formik.errors.updatedBy}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                      {modalUpdate ? (\r\n                        <Input\r\n                          typeInput=\"1\"\r\n                          column=\"6\"\r\n                          rows=\"1\"\r\n                          disabled\r\n                          label=\"Ngày tạo\"\r\n                          value={moment(formik.values.createdDate).format(\r\n                            \"DD-MM-YYYY\"\r\n                          )}\r\n                        />\r\n                      ) : (\r\n                        \"\"\r\n                      )}\r\n                    {modalUpdate ? (\r\n                      <div className=\"col-sm-6\">\r\n                        {formik.values.updatedDate === null ? (\r\n                          <Input\r\n                            label=\"Ngày cập nhật\"\r\n                            rows=\"1\"\r\n                            disabled\r\n                            value=\"\"\r\n                          />\r\n                        ) : (\r\n                          <Input\r\n                            label=\"Ngày cập nhật\"\r\n                            rows=\"1\"\r\n                            disabled\r\n                            value={moment(formik.values.updatedDate).format(\r\n                              \"DD-MM-YYYY\"\r\n                            )}\r\n                          />\r\n                        )}\r\n                      </div>\r\n                    ) : (\r\n                      \"\"\r\n                    )}\r\n                  </div>\r\n                </Modal.Body>\r\n                  <div className=\"row justify-content-end small\">\r\n                    <div className=\"col-auto pr-5\">\r\n                      <p className=\"p-0\">\r\n                      Field required (<span className=\"text-danger\">*</span>)\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                <Modal.Footer>\r\n                  <Button variant=\"secondary\" onClick={handleModalClose}>\r\n                    Close\r\n                  </Button>\r\n                  <Button variant=\"primary\" type=\"submit\">\r\n                    Save\r\n                  </Button>\r\n                </Modal.Footer>\r\n              </form>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\pagination.jsx",["353","354","355","356","357","358","359","360","361","362","363","364","365"],"import React, { Fragment } from \"react\";\r\n\r\nfunction Pagination(props) {\r\n  const { pagination, onPageChange } = props;\r\n  const { pageP, sizeP, totalElementsP } = pagination;\r\n  const totalPage = Math.ceil(totalElementsP / sizeP);\r\n  const handlePagination = (newPage) => {\r\n    onPageChange(newPage);\r\n  };\r\n  const showPage = (numberPage) => {\r\n    var result = [];\r\n    for (var i = 0; i < numberPage; i++) {\r\n      result.push(i + 1);\r\n    }\r\n    return result;\r\n  };\r\n  return (\r\n    <ul className=\"pagination pagination-rounded justify-content-end mb-2\">\r\n        {pageP < 1 ?(\r\n          <li className=\"page-item disabled\">\r\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={() => handlePagination(pageP - 1)}>\r\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\r\n          </a>\r\n        </li>\r\n        ):(\r\n          <li className=\"page-item \">\r\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={() => handlePagination(pageP - 1)}>\r\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\r\n          </a>\r\n        </li>\r\n        )}\r\n\r\n         {showPage(totalPage).map((item, index) => {\r\n            return (\r\n              <Fragment>\r\n                {pageP == index ? (\r\n                  <li className=\"page-item active\" onClick={() => handlePagination(index)}>\r\n                    <a className=\"page-link\" href=\"javascript: void(0);\">{item}</a>\r\n                  </li>\r\n                ):(\r\n                  <li className=\"page-item\" onClick={() => handlePagination(index)}>\r\n                    <a className=\"page-link\" href=\"javascript: void(0);\">{item}</a>\r\n                  </li>\r\n                )}\r\n              </Fragment>\r\n            );\r\n          })}\r\n\r\n        {pageP >= totalPage - 1 ?(\r\n          <li className=\"page-item disabled\">\r\n            <a className=\"page-link\" href=\"javascript: void(0);\" onClick={() => handlePagination(pageP + 1)}>\r\n              <i class=\"fas fa-chevron-right\"></i>\r\n            </a>\r\n          </li>\r\n        ):(\r\n          <li className=\"page-item\">\r\n            <a className=\"page-link\" href=\"javascript: void(0);\" onClick={() => handlePagination(pageP + 1)}>\r\n              <i class=\"fas fa-chevron-right\"></i>\r\n            </a>\r\n          </li>\r\n        )}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default Pagination;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Controls\\select.jsx",["366","367","368","369","370","371","372"],"import React, { Component, Fragment } from \"react\";\r\nclass select extends Component {\r\n  state = {};\r\n  render() {\r\n    const {\r\n      type,\r\n      id,\r\n      name,\r\n      label,\r\n      labelSize,\r\n      placeHolder,\r\n      readOnly,\r\n      column,\r\n      err,\r\n      required,\r\n      autofocus,\r\n      inputRef,\r\n      errMessage,\r\n      frmField,\r\n      ...others\r\n    } = this.props;\r\n    const typee = type ? type : \"1\";\r\n    const size = labelSize ? labelSize : 4;\r\n    const classLeft = `col-sm-${size} col-form-label text-center`;\r\n    const ColumnClass = `col-sm-${column}`;\r\n    const classRight = `col-sm-${12 - size} `;\r\n    //const numRows = rows ? rows : 1;\r\n    const selectClass = `form-control ${err ? \"is-invalid\" : \"\"}`;\r\n    return (\r\n      <Fragment>\r\n        {(() => {\r\n          switch (typee) {\r\n            case \"1\":\r\n              return (\r\n                <div className={ColumnClass}>\r\n                  <div className=\"form-group\">\r\n                    <label htmlFor=\"formrow-email-input\">{label}</label>\r\n                    {others[\"rows\"] == 1 ? (\r\n                      <textarea\r\n                        ref={inputRef}\r\n                        type={type}\r\n                        className={selectClass}\r\n                        {...others}\r\n                        {...frmField}\r\n                        //id={id}\r\n                        //name={name}\r\n                        //placeholder={placeHolder}\r\n                        //readOnly={readOnly}\r\n                      />\r\n                    ) : (\r\n                      <select\r\n                        ref={inputRef}\r\n                        type={type}\r\n                        className={selectClass}\r\n                        required\r\n                        {...others}\r\n                        {...frmField}\r\n                      ></select>\r\n                    )}\r\n                    {err ? (\r\n                      <div className=\"invalid-feedback\">{errMessage}</div>\r\n                    ) : null}\r\n                  </div>\r\n                </div>\r\n              );\r\n              break;\r\n\r\n            case \"2\":\r\n              return (\r\n                <div className={ColumnClass}>\r\n                  <div className=\"form-group row\">\r\n                    <label htmlFor={id} className={classLeft}>\r\n                      {label}\r\n                    </label>\r\n                    <div className={classRight}>\r\n                      {others[\"rows\"] == 1 ? (\r\n                        <textarea\r\n                          ref={inputRef}\r\n                          type={type}\r\n                          className={selectClass}\r\n                          {...others}\r\n                          {...frmField}\r\n                          //id={id}\r\n                          //name={name}\r\n                          //placeholder={placeHolder}\r\n                          //readOnly={readOnly}\r\n                        />\r\n                      ) : (\r\n                        <select\r\n                          ref={inputRef}\r\n                          type={type}\r\n                          className={selectClass}\r\n                          required\r\n                          {...others}\r\n                          {...frmField}\r\n                        ></select>\r\n                      )}\r\n                      {err ? (\r\n                        <div className=\"invalid-feedback\">{errMessage}</div>\r\n                      ) : null}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n              break;\r\n          }\r\n        })()}\r\n      </Fragment>\r\n    );\r\n    {\r\n      /* <div className=\"form-group row\">\r\n        <label htmlFor={id} className={classLeft}>\r\n          {label}\r\n        </label>\r\n        <div className={classRight}>\r\n          {others[\"rows\"] > 1 ? (\r\n            <textarea\r\n              ref={inputRef}\r\n              type={type}\r\n              className={selectClass}\r\n              {...others}\r\n              {...frmField}\r\n              //id={id}\r\n              //name={name}\r\n              //placeholder={placeHolder}\r\n              //readOnly={readOnly}\r\n            />\r\n          ) : (\r\n            <select\r\n              ref={inputRef}\r\n              type={type}\r\n              className={selectClass}\r\n              {...others}\r\n              {...frmField}\r\n            ></select>\r\n          )}\r\n          {err ? <div className=\"invalid-feedback\">{errMessage}</div> : null}\r\n        </div>\r\n      </div> */\r\n    }\r\n  }\r\n}\r\n\r\nexport default select;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\roomService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\jobTitleService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\subject.jsx",["373","374","375","376","377","378","379","380","381","382","383","384","385"],"import {Fragment, useEffect, useRef, useState} from \"react\";\nimport subjectService from './../../Services/subjectService';\nimport Input from './../../Controls/input';\nimport queryString from 'query-string';\nimport { useFormik } from 'formik';\nimport * as Yup from \"yup\";\nimport { Button, Modal } from 'react-bootstrap';\nimport Select from 'react-select';\nimport SearchSubject from \"./searchSubject\";\nimport Pagination from \"./paginationSubject\";\n\n\nconst Subject = (props) => {\n  const childRef = useRef();\n\n  \n  const [selectedSubjectStatus,setSelectedSubjectStatus] = useState([{value:'Active',label:'Active',disabled:false}]);\n  //add\n    //selection\n    const optionsSubjectStatus = [\n      {value:'Active',label:'Active',disabled:false},\n      {value:'Inactive',label:'Inactive',disabled:false}\n    ];\n\n    for (var index = 0; index < optionsSubjectStatus.length; index++) {\n      if (selectedSubjectStatus.length >= 1) {\n        optionsSubjectStatus[index].disabled=true;\n      }\n    }\n  //modal\n  const [showModal, setModalShow] = useState(false);\n  const [modalUpdate, setModalUpdate] = useState(false);\n  //update \n  const [subjectId,setSubjectId] = useState(0);\n  //check form update and add\n  const handleModalShow = (e,dataId) => {\n    if(e) e.preventDefault();\n    setSubjectId(dataId);\n    if (dataId > 0) {\n      setModalUpdate(true);\n      subjectService.get(dataId).then((res)=>{\n        const subjectById = res.data[0];\n        formik.setValues(subjectById);\n        setSelectedSubjectStatus({label:subjectById.statusSub,value:subjectById.statusSub,disabled:false})\n        setModalShow(true);\n      });\n    }else{\n      setModalUpdate(false);\n      formik.resetForm();\n      formik.setFieldValue(\"statusSub\",\"Active\");\n      setModalShow(true);\n    }\n  }\n    \n  //delete\n  const deleteRow = ((e,dataId) => {\n      e.preventDefault();\n      subjectService.remove(dataId).then(res=>{\n        if (res.status === 0) {\n            loadData();\n        }\n      })\n      \n    \n  })\n\n  const [subjects,setSubjects] = useState([]);\n\nconst handleModalClose = () => setModalShow(false);\nconst formik = useFormik({\n    initialValues:{\n                codeSub:\"\",\n                nameSub:\"\",\n                statusSub: \"\",\n                creditSub:\"\",\n                passCore:\"\",\n                noteSub:\"\"\n            },\n            validationSchema: Yup.object({\n                codeSub: Yup.string()\n                    .required(\"Required\")\n                    .min(4,\"Must be 4 character or more.\")\n                    .max(10,\"Less than 10 characters. \"),\n                nameSub: Yup.string()\n                    .required(\"Required\")\n                    .min(2,\"Must be 2 character or more.\")\n                    .max(40,\"less than 40 characters.\"),\n                creditSub: Yup.string()\n                    .required(\"Required\")\n                    .min(1,\"Must more than one.\")\n                    .max(3,\"Less than 3 characters.\"),\n                passCore: Yup.string()\n                    .required(\"Required\"),\n                noteSub: Yup.string()\n                    .max(255,\"Over 255 Character\"),\n                \n            }),\n            onSubmit:(values) =>{\n              console.log(\"data\",values);\n              // console.log(selectedSubjectStatus.value);\n              handleFormSubmit(values);\n            },\n    });\n//search\nconst [searchSubject, setSearchSubject] = useState({\n  keyword: \"\",\n  searchTerm : \"\"\n});\nconst handleSearchChange = (newSearch) => {\n  setSearchSubject({\n    ...searchSubject,\n    keyWord: newSearch,\n  })\n};\n//pagination\n      const [filters, setFilters] = useState({\n        page: 0,\n        size: 4,\n      });\n      const handlePageChange = (newPage) => {\n        setFilters({\n          ...filters,\n          page: newPage,\n        })\n      };\n  const loadData = () =>{\n    if (searchSubject.searchTerm == \"\" || searchSubject.keyWord == \"\") {\n      const paramsFilters = queryString.stringify(filters);\n      subjectService.paginationSubject(paramsFilters).then((res) => {\n        console.log(JSON.stringify(res))\n        const totalRows = res.data[0].totalElements;\n        const totalPage = res.data[0].totalPages;\n        const size = res.data[0].size;\n        const pageCurrent = res.data[0].pageable.pageNumber;\n        if (res.status === 0) {\n          setSubjects(res.data[0].content);\n          setPagination({\n            page: pageCurrent,\n            size: size,\n            totalRows: totalRows,\n          })\n        }\n      });\n    }else{\n      const keyword = searchSubject.searchTerm;\n      subjectService.searchSubject(searchSubject.searchTerm).then((res) => {\n        if (res.status === 0) {\n          setSubjects(res.data);\n        }else{\n          setSubjects(res.data);\n        }\n      });\n    }\n  }\n  const handleFormSubmit = (data) => {\n    subjectService\n    .add(data)\n    .then((res)=>{\n        if (res.status === 0) {\n            loadData();\n            handleModalClose();\n\n        }\n    })\n}\n  const [pagination,setPagination] = useState({\n    page:0,\n    size:5,\n    totalRows: 1\n  })\n  useEffect(()=>{\n    loadData();\n    document.title = \"Subjects - ISC Quang Trung Management\";\n  },[filters,searchSubject])\n\n    return ( \n        <Fragment>\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"page-title-box d-flex align-items-center justify-content-between\">\n              <h4 className=\"mb-0 font-size-18\">Subjects List</h4>\n              <div className=\"page-title-right\">\n                <ol className=\"breadcrumb m-0\">\n                  <li className=\"breadcrumb-item\"><a href=\"#\">ISC Quang Trung</a></li>\n                  <li className=\"breadcrumb-item active\">Subjects List</li>\n                </ol>\n              </div>\n            </div>\n          </div>\n        </div>\n        {/* end page title */}\n        <div className=\"row\">\n          <div className=\"col-12\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                <div className=\"row mb-2\">\n                  <div className=\"col-sm-4\">\n                    <div className=\"search-box mr-2 mb-2 d-inline-block\">\n                      <div className=\"position-relative\">\n                        <SearchSubject onSubmit={handleSearchChange}/>\n                        <i className=\"bx bx-search-alt search-icon\" />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"col-sm-8\">\n                    <div className=\"text-sm-right\">\n                      <button type=\"button\" \n                      data-toggle=\"modal\" \n                      onClick={()=>handleModalShow(null,0)} \n                      data-target=\".addStudentModal\" \n                      className=\"btn btn-success btn-rounded waves-effect waves-light mb-2 mr-2\"><i className=\"bx bxs-add-to-queue\" /> Add new subject</button>\n                    </div>\n                  </div>{/* end col*/}\n                </div>\n                <div className=\"table-responsive\">\n                  \n                  <table className=\"table table-centered table-nowrap\">\n                    <thead className=\"thead-light\">\n                      <tr>\n                        <th style={{width: 20}}>\n                          {/* <div className=\"custom-control custom-checkbox\">\n                            <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n                            <label className=\"custom-control-label\" htmlFor=\"customCheck1\">&nbsp;</label>\n                          </div> */}\n                          #\n                        </th>\n                        <th>Code Subject</th>\n                        <th>Name Subject</th>\n                        <th>Credit Subject</th>\n                        <th>Pass the subject</th>\n                        <th>Status</th>\n                        <th>Note</th>\n                        <th>Action</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {subjects == null?(\n                        <tr className=\"text-center\">\n                            <td colspan=\"9\">Not found subject!</td>\n                          </tr>\n                      ):(subjects.map((subject,idx) => {\n                        return(\n                          <tr key={subject.id}>\n                        <td>\n                          {idx+1}\n                        </td>\n                        <td><a href=\"#\" className=\"text-body font-weight-bold\"></a>{subject.codeSub}</td>\n                        <td>{subject.nameSub}</td>\n                        <td>\n                          {subject.creditSub}\n                        </td>\n                        <td>\n                          {subject.passCore}\n                        </td>\n                        <td>\n                          <span className=\"badge badge-pill badge-soft-success font-size-12\">{subject.statusSub}</span>\n                        </td>\n                        <td>\n                          {subject.noteSub}\n                        </td>\n                        <td>\n                          <a href=\"#\" onClick={(e) => handleModalShow(e,subject.id)} className=\"mr-3 text-primary\"><i className=\"fas fa-user-edit font-size-18\" /></a>\n                          <a href=\"#\" onClick={(e) => deleteRow(e,subject.id)} className=\"text-danger\"><i className=\"far fa-trash-alt font-size-18\" /></a>\n                        </td>\n                      </tr>\n                        )\n                      }))\n                      }\n                    </tbody>\n                  </table>\n                </div>\n                {searchSubject.keyword == \"\"  ?(\n                  <Pagination pagination={pagination} onPageChange={handlePageChange}/>\n                ):(\"\")\n\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* modal */}\n        <Modal show={showModal} onHide={handleModalClose} size=\"lg\" backdrop=\"static\" keyboard={false}>\n        <Modal.Header closeButton>\n        {modalUpdate ? (\n                <Modal.Title>Update Subject</Modal.Title>\n              ) : (\n                <Modal.Title>Add Subject</Modal.Title>\n              )}\n        </Modal.Header>\n        <form onSubmit={formik.handleSubmit}>\n            <Modal.Body>\n            <div className=\"row px-3\">\n                <Input\n                    typeInput=\"1\"\n                    column=\"12\"\n                    rows=\"1\"\n                    id=\"txtNameSubject\"\n                    type=\"text\"\n                    label=\"Name Subject *\"\n                    frmField={formik.getFieldProps(\"nameSub\")}\n                    err={formik.touched.nameSub && formik.errors.nameSub}\n                    errMessage={formik.errors.nameSub}\n                />\n                <Input\n                    typeInput=\"1\"\n                    column=\"6\"\n                    rows=\"1\"\n                    id=\"txtCodeSubject\"\n                    type=\"text\"\n                    label=\"Code Subject *\"\n                    frmField={formik.getFieldProps(\"codeSub\")}\n                    err={formik.touched.codeSub && formik.errors.codeSub}\n                    errMessage={formik.errors.codeSub}\n                    /> \n\n                {modalUpdate?(\n                <div className=\"col-6\">\n                        <div className=\"form-group\">\n                          <label>Status Subject *</label>\n                          <Select\n                              onChange = {(val) => {\n                                formik.setFieldValue(\"statusSub\", val.value);\n                                setSelectedSubjectStatus(val);\n                              }}\n                              value={selectedSubjectStatus}\n                              closeMenuOnSelect={true}\n                              options={optionsSubjectStatus}\n                            />\n                        </div>\n                  </div> \n                    ):(\n                    \n                  <div className=\"col-6\">\n                    <div className=\"form-group\">\n                      <label>Status Subject</label>\n                      <Select\n                          onChange = {(val) => {\n                            formik.setFieldValue(\"statusSub\", val.value);\n                            setSelectedSubjectStatus(val);\n                          }}\n                          value={selectedSubjectStatus}\n                          closeMenuOnSelect={true}\n                          options={optionsSubjectStatus}\n                        />\n                    </div>\n                  </div>)}\n                    <Input\n                        typeInput=\"1\"\n                        column=\"6\"\n                        rows=\"1\"\n                        id=\"creditSub\"\n                        type=\"number\"\n                        label=\"Credit *\"\n                        frmField={formik.getFieldProps(\"creditSub\")}\n                        err={formik.touched.creditSub && formik.errors.creditSub}\n                        errMessage={formik.errors.creditSub}\n                    />\n                    <Input\n                        typeInput=\"1\"\n                        column=\"6\"\n                        rows=\"1\"\n                        id=\"passCore\"\n                        type=\"number\"\n                        label=\"Pass the subject *\"\n                        frmField={formik.getFieldProps(\"passCore\")}\n                        err={formik.touched.passCore && formik.errors.passCore}\n                        errMessage={formik.errors.passCore}\n                    />\n                        <Input\n                        typeInput=\"1\"\n                        column=\"12\"\n                        rows=\"2\"\n                        id=\"noteSub\"\n                        type=\"text\"\n                        label=\"Note\"\n                        frmField={formik.getFieldProps(\"noteSub\")}\n                        err={formik.touched.noteSub && formik.errors.noteSub}\n                        errMessage={formik.errors.noteSub}\n                    />  \n                </div>\n            \n            </Modal.Body>\n                <div className=\"row justify-content-end small\">\n                  <div className=\"col-auto pr-5\">\n                    <p className=\"p-0\">\n                    Field required (<span className=\"text-danger\">*</span>)\n                    </p>\n                  </div>\n                </div>\n            <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleModalClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" type=\"submit\" disabled={!(formik.isValid && formik.dirty)}>\n                        Save\n                    </Button>\n            </Modal.Footer>\n        </form>\n    </Modal>\n        </Fragment>\n     );\n}\n \nexport default Subject;","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\subjectService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\paginationSubject.jsx",["386","387","388","389","390","391","392","393","394","395"],"import React from \"react\";\nimport PropTypes from 'prop-types';\n\nPagination.propTypes = {\n  pagination: PropTypes.object.isRequired,\n  onPageChange: PropTypes.func,\n};\n\nPagination.defaultProps = {\n  onPageChange: null,\n}\n\nfunction Pagination(props) {\n  const {pagination, onPageChange} = props;\n  const {page,size,totalRows} = pagination;\n  const totalPage = Math.ceil(totalRows/size);\n\n  function handlePageChange(newPage) {\n    if(onPageChange){\n      onPageChange(newPage);\n    }\n  }\n  return(\n    <div>\n      <ul className=\"pagination pagination-rounded justify-content-end mb-2\">\n      <div className=\"mt-1 mr-2 mr-auto\">Total <strong>{totalRows}</strong> Student</div>\n        {page == 0 ?(\n          <li className=\"page-item disabled\">\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page-1)}>\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n          </a>\n        </li>\n        ):(\n          <li className=\"page-item \">\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page-1)}>\n            <i class=\"fas fa-chevron-right fa-flip-horizontal\"></i>\n          </a>\n        </li>\n        )}\n        \n        <li className=\"page-item py-1 px-2 active text-dark\">Trang {page+1}/{totalPage}</li>\n\n        {page == totalPage-1 ?(\n        <li className=\"page-item disabled\">\n          <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page+1)}>\n            <i class=\"fas fa-chevron-right\"></i>\n          </a>\n        </li>\n        ):(\n          <li className=\"page-item\">\n            <a className=\"page-link\" href=\"javascript: void(0);\" onClick={()=>handlePageChange(page+1)}>\n              <i class=\"fas fa-chevron-right\"></i>\n            </a>\n          </li>\n        )}\n      </ul>\n    </div>\n  )\n}\n\nexport default Pagination;","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Subject\\searchSubject.jsx",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Dashboard\\dashboard.jsx",["396","397","398","399","400","401","402"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Assets\\js\\app.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Lecturer\\lecturer.jsx",["403","404","405","406","407","408","409","410","411","412","413","414","415","416","417"],"import React, { Fragment, useRef, useState, useEffect } from \"react\";\r\nimport lecturerService from \"../../Services/lecturerService\";\r\nimport queryString from \"query-string\";\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {toast} from 'react-toastify';  \r\nimport $ from \"jquery\";\r\nimport { Modal, Button } from \"react-bootstrap\";\r\nimport { confirmAlert } from \"react-confirm-alert\";\r\nimport Input from \"../../Controls/input\";\r\nimport Pagination from \"../../Controls/pagination\";\r\nimport Select from \"react-select\";\r\nimport SearchLecturer from \"./searchLecturer\";\r\nimport api from \"../../Services/api\";\r\n\r\nconst Lecturer = () => {\r\n\tconst [showModal, setShow] = useState(false);\r\n\tconst [titleModal, setTitleModal] = useState(false);\r\n\tconst [listLecturer, setListLecturer] = useState([]);\r\n\tconst handleClose = () => {\r\n\t\tsetShow(false); \r\n\t\tformik.resetForm(); \r\n\t\tsetUpdateDate(false);\r\n\t};\r\n\t//pagination\r\n\tconst [pagination,setPagination]= useState({\r\n\t\tpage: 0,\r\n\t\tsize: 2,\r\n\t\ttotalElements: 1\r\n\t});\r\n\t const [filters,setFilters]= useState({\r\n\t\t size: 4,\r\n\t\t page: 0,\r\n\t\t sort: \"ASC\",\r\n\t\t search: \"\",\r\n\t });\r\n  const [idLecturer, setIdLecturer] = useState(0);\r\n  const [selectedLec,setSelectedLec] = useState({ label: 'Active', value: 'Active' });\r\n  const [uploadImg,setUploadImg] = useState(false);\r\n  const [updateDate,setUpdateDate] = useState(false);\r\n  const options =[\r\n    { label: \"Active\", value: \"Active\"},\r\n    { label: \"Inactive\", value: \"Inactive\"},\r\n  ]\r\n  for (var i = 0; i < options.length; i++) {\r\n    if (selectedLec.length >= 1) {\r\n\t\toptions[i].disabled = true;\r\n    }\r\n  }\r\n\tuseEffect(() => {\r\n\t\tdocument.title = \"Lecturers - ISC Quang Trung Management\";\r\n\t\tloadData();\r\n\t\t\r\n\t}, [filters]);\r\n\r\n\tuseEffect(() => {\r\n\t\t$(\"#imageUpload1\").change(function () {\r\n\t\t\treadURL(this);\r\n\t\t});\r\n\t});\r\n\tconst selectedValueLec=(newOptions)=>{\r\n\t\tconsole.log(\"options\",newOptions)\r\n\t\tsetSelectedLec(newOptions)\r\n\t\tconsole.log(\"selected1\", selectedLec)\r\n\t}\r\n\tconst handledSearchChange = (newSearch) => {\r\n\t\tsetFilters({\r\n\t\t  ...filters,\r\n\t\t  page: 0,\r\n\t\t  search: newSearch.searchTerm,\r\n\t\t})\r\n\t  };\r\n\tconst handlePagination=()=>{\r\n\t\tconst paramsFilters = queryString.stringify(filters);\r\n\t\tlecturerService.paginationLecturer(paramsFilters).then(res=>{\r\n\t\t\tif(res.status ===0){\r\n\t\t\t\tlet sizeP = res.data[0].size;\r\n\t\t\t\tlet totalElementsP= res.data[0].totalElements;\r\n\t\t\t\tlet pageP = res.data[0].pageable.pageNumber;\r\n\t\t\t\tlet dataP = res.data[0].content;\r\n\t\t\t\t  setPagination({pageP,sizeP,totalElementsP});\r\n\t\t\t\t  setListLecturer(dataP);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\tconst handlePageChange=(newPage)=>{\r\n\t\tsetFilters({\r\n\t\t\t...filters,\r\n\t\t\tpage: newPage\r\n\t\t});\r\n\t\t\r\n\t}\r\n\tconst readURL = (input) => {\r\n\t\tif (input.files && input.files[0]) {\r\n\t\t\tvar reader = new FileReader();\r\n\t\t\treader.onload = function (e) {\r\n\t\t\t\t$(\"#imagePreview\").css(\r\n\t\t\t\t\t\"background-image\",\r\n\t\t\t\t\t\"url(\" + e.target.result + \")\"\r\n\t\t\t\t);\r\n\t\t\t\t$(\"#imagePreview\").hide();\r\n\t\t\t\t$(\"#imagePreview\").fadeIn(650);\r\n\t\t\t};\r\n\t\t\tformik.setFieldValue(\"image\", input.files[0]);\r\n\t\t\treader.readAsDataURL(input.files[0]);\r\n\t\t}\r\n\t};\r\n\t// getAll lecturer\r\n\tconst loadData = () => {\r\n\t\thandlePagination();\r\n\t};\r\n\t//delete Lecturer confirm\r\n\tconst submitDelete = (id) => {\r\n\t\tconfirmAlert({\r\n\t\t\ttitle: \"Confirm to submit\",\r\n\t\t\tmessage: \"Are you sure?\",\r\n\t\t\tbuttons: [\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"Yes\",\r\n\t\t\t\t\tonClick: () => deleteLecturer(id),\r\n\t\t\t\t},\r\n\t\t\t\t{\r\n\t\t\t\t\tlabel: \"No\",\r\n\t\t\t\t},\r\n\t\t\t],\r\n\t\t});\r\n\t};\r\n\tconst deleteLecturer = (id) => {\r\n\t\tlecturerService.deleteLecturer(id).then((res) => {\r\n\t\t\tif (res.status === 0) {\r\n\t\t\t\tloadData();\r\n\t\t\t\ttoast.success(\"Delete Lecturer Success!\")\r\n\t\t\t}else{\r\n\t\t\t\ttoast.warning(\" Delete Lecturer failed !\")\r\n\t\t\t}\r\n\t\t});\r\n\t};\r\n\tconst handleShowModel = (id) => {\r\n\t\tsetIdLecturer(id);\r\n\t\tif (id > 0) {\r\n\t\t\tsetTitleModal(true);\r\n\t\t\tsetUpdateDate(true);\r\n\t\t\tlecturerService.getLecturer(id).then((res) => {\r\n\t\t\t\tif (res.status === 0) {\r\n\t\t\t\t\tsetShow(true);\r\n\t\t\t\t\tlet item = res.data[0]\r\n\t\t\t\t\tformik.setValues(item);\r\n\t\t\t\t\tformik.setFieldValue(\"statusLec\", {label: item.statusLec, value: item.statusLec})\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tsetUploadImg(true);\r\n\t\t}else{\r\n\t\t\tsetTitleModal(false);\r\n\t\t\tsetUploadImg(false);\r\n\t\t\tsetShow(true);\r\n\t\t}\r\n\t};\r\n\r\n\t// add new lecturer\r\n\tconst addNewLecturer = (data) => {\r\n\t\tlecturerService\r\n\t\t\t.addNewLecturer(\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\tdata.codeLec,\r\n\t\t\t\tdata.firstName,\r\n\t\t\t\tdata.lastName,\r\n\t\t\t\tdata.addressLec,\r\n\t\t\t\tdata.phoneLec,\r\n\t\t\t\tdata.emailLec,\r\n\t\t\t\tdata.degree,\r\n\t\t\t\tformik.values.statusLec.value,\r\n\t\t\t\tdata.noteLec,\r\n\t\t\t\tdata.image\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res.status === 0){\r\n                    toast.success('Add new Lecturer Success');\r\n                    loadData();\r\n                    handleClose();\r\n                  }else{\r\n\t\t\t\t\tif (res.message == \"Duplicate Lecturer Code\") {\r\n\t\t\t\t\t\tformik.setFieldError('codeLec',res.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(res.message == \"Duplicate Lecturer Email\"){\r\n\t\t\t\t\t\tformik.setFieldError('emailLec',res.message);\r\n\t\t\t\t\t}\r\n                  }  \r\n\t\t\t});\r\n\t};\r\n\r\n\tconst updateLecturerHasImage = (id, data) => {\r\n\t\tlecturerService\r\n\t\t\t.updateLecturerHasImage(\r\n\t\t\t\tid,\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\tdata.codeLec,\r\n\t\t\t\tdata.firstName,\r\n\t\t\t\tdata.lastName,\r\n\t\t\t\tdata.addressLec,\r\n\t\t\t\tdata.phoneLec,\r\n\t\t\t\tdata.emailLec,\r\n\t\t\t\tdata.degree,\r\n\t\t\t\tformik.values.statusLec.value,\r\n\t\t\t\tdata.noteLec,\r\n\t\t\t\tdata.image\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res.status === 0) {\r\n\t\t\t\t\tsetUpdateDate(true);\r\n\t\t\t\t\tloadData();\r\n\t\t\t\t\tsetShow(false);\r\n\t\t\t\t\ttoast.success(\" Update Lecturer Success!\")\r\n\t\t\t\t}else{\r\n\t\t\t\t\ttoast.warning(\" Update Lecturer failed !\")\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n\tconst updateLecturerNotImage = (id, data) => {\r\n\t\t// console.log(\"updateLecturerNotImage: \", id, data);\r\n\t\tlecturerService\r\n\t\t\t.updateLecturerNotImage(\r\n\t\t\t\tid,\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\t\"Admin\",\r\n\t\t\t\tdata.codeLec,\r\n\t\t\t\tdata.firstName,\r\n\t\t\t\tdata.lastName,\r\n\t\t\t\tdata.addressLec,\r\n\t\t\t\tdata.phoneLec,\r\n\t\t\t\tdata.emailLec,\r\n\t\t\t\tdata.degree,\r\n\t\t\t\tformik.values.statusLec.value,\r\n\t\t\t\tdata.noteLec,\r\n\t\t\t)\r\n\t\t\t.then((res) => {\r\n\t\t\t\tif (res.status === 0) {\r\n\t\t\t\t\tloadData();\r\n\t\t\t\t\tsetShow(false);\r\n\t\t\t\t\ttoast.success(\" Update Lecturer success !\")\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif (res.message == \"Duplicate Lecturer Code\") {\r\n\t\t\t\t\t\tformik.setFieldError('codeLec',res.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(res.message == \"Duplicate Lecturer Email\"){\r\n\t\t\t\t\t\tformik.setFieldError('emailLec',res.message);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t};\r\n\t\r\n\tconst formik = useFormik({\r\n\t\tinitialValues: {\r\n\t\t\tcodeLec: \"\",\r\n\t\t\timage: \"\",\r\n\t\t\tlastName: \"\",\r\n\t\t\tfirstName: \"\",\r\n\t\t\temailLec: \"\",\r\n\t\t\tphoneLec: \"\",\r\n\t\t\taddressLec: \"\",\r\n\t\t\tcreatedBy: \"\",\r\n\t\t\tstatusLec: { label: 'Active', value: 'Active' },\r\n\t\t\tnoteLec: \"\",\r\n\t\t\tupdatedBy: \"\",\r\n\t\t\tcreatedDate:\"\",\r\n\t\t\tupdatedDate:\"\",\r\n\t\t\tdegree: \"\",\r\n\t\t},\r\n\t\tvalidationSchema: Yup.object({\r\n\t\t\tcodeLec: Yup.string().required(\"Required\"),\r\n\t\t\timage: Yup.string().required(\"Required\"),\r\n\t\t\tlastName: Yup.string().required(\"Required\"),\r\n\t\t\tfirstName: Yup.string().required(\"Required\"),\r\n\t\t\temailLec: Yup.string().required(\"Required\"),\r\n\t\t\tphoneLec: Yup.string().required(\"Required\"),\r\n\t\t\taddressLec: Yup.string().required(\"Required\"),\r\n\t\t\tdegree: Yup.string().required(\"Required\"),\r\n\t\t}),\r\n\t\tonSubmit: (values) => {\r\n\t\t\tif (idLecturer === 0) {\r\n\t\t\t\taddNewLecturer(values);\r\n\t\t\t} else {\r\n\t\t\t\tif (values.image.name === undefined) {\r\n\t\t\t\t\tupdateLecturerNotImage(idLecturer, values);\r\n\t\t\t\t\tformik.resetForm();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tupdateLecturerHasImage(idLecturer, values);\r\n\t\t\t\t\tformik.resetForm();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\t});\r\n\t\r\n\treturn (\r\n\t\t<Fragment>\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t<div className=\"page-title-box d-flex align-items-center justify-content-between\">\r\n\t\t\t\t\t\t<h4 className=\"mb-0 font-size-18\">Lecturer List</h4>\r\n\t\t\t\t\t\t<div className=\"page-title-right\">\r\n\t\t\t\t\t\t\t<ol className=\"breadcrumb m-0\">\r\n\t\t\t\t\t\t\t\t<li className=\"breadcrumb-item\">\r\n\t\t\t\t\t\t\t\t\t<a href=\"#\">ISC Quang Trung</a>\r\n\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t<li className=\"breadcrumb-item active\">Lecturer List</li>\r\n\t\t\t\t\t\t\t</ol>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div className=\"row\">\r\n\t\t\t\t<div className=\"col-12\">\r\n\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t<div className=\"card-body\">\r\n\t\t\t\t\t\t\t<div className=\"row mb-2\">\r\n\t\t\t\t\t\t\t\t<div className=\"col-sm-4\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"search-box mr-2 mb-2 d-inline-block\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"position-relative\">\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t<SearchLecturer onSubmit={handledSearchChange}/>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"bx bx-search-alt search-icon\" />\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t<div className=\"col-sm-8\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"text-sm-right\">\r\n\t\t\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\tdata-toggle=\"modal\"\r\n\t\t\t\t\t\t\t\t\t\t\tdata-target=\".addStudentModal\"\r\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\r\n\t\t\t\t\t\t\t\t\t\t\t\thandleShowModel(0);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tclassName=\"btn btn-success btn-rounded waves-effect waves-light mb-2 mr-2\"\r\n\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"bx bxs-add-to-queue\" /> Add new Lecturer\r\n\t\t\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"table-responsive\">\r\n\t\t\t\t\t\t\t\t<table className=\"table table-centered table-nowrap\">\r\n\t\t\t\t\t\t\t\t\t<thead className=\"thead-light\">\r\n\t\t\t\t\t\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>STT</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Code</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Image</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Full Name</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Email</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Phone</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Address</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th>Status</th>\r\n\t\t\t\t\t\t\t\t\t\t\t<th></th>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t</thead>\r\n\t\t\t\t\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t{listLecturer.length == 0 ? (\r\n\t\t\t\t\t\t\t\t\t\t<tr className=\"text-center\">\r\n\t\t\t\t\t\t\t\t\t\t\t<td colspan=\"9\">Not found lecturer!</td>\r\n\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t):(\r\n\t\t\t\t\t\t\t\t\t\tlistLecturer.map((lecturer, index) => {\r\n\t\t\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{index + 1}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td><a href=\"javascript: void(0);\" className=\"text-body font-weight-bold\">{lecturer.codeLec}</a> </td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td style={{width: 100}}>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<img className=\"img-fluid img-thumbnai rounded mx-auto\" \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tsrc={api.url.image + lecturer.image}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\talt={\"Hinh \" + lecturer.lastName} />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{lecturer.lastName} {lecturer.firstName}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{lecturer.emailLec}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{lecturer.phoneLec}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>{lecturer.addressLec}</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{lecturer.statusLec ===\"Active\"?\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{backgroundColor: \"#0101DF\", color: \"white\",borderRadius: 40, padding:3}}>{lecturer.statusLec}</span>: \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span style={{backgroundColor: \"#FFBF00\", borderRadius: 40, padding:3}}>{lecturer.statusLec}</span>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"mr-3 text-primary\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => handleShowModel(lecturer.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"fas fa-user-edit font-size-18\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<a\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tclassName=\"text-danger\"\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => submitDelete(lecturer.id)}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<i className=\"far fa-trash-alt font-size-18\" />\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t</a>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</tbody>\r\n\t\t\t\t\t\t\t\t</table>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Pagination pagination={pagination} onPageChange={handlePageChange}/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<Modal\r\n\t\t\t\tshow={showModal}\r\n\t\t\t\tonHide={handleClose}\r\n\t\t\t\tsize=\"xl\"\r\n\t\t\t\tbackdrop=\"static\"\r\n\t\t\t\tkeyboard={false}>\r\n\t\t\t\t<Modal.Header closeButton>\r\n\t\t\t\t\t<Modal.Title>{titleModal ? \"Update Lecturer\": \"Add new Lecturer\"}</Modal.Title>\r\n\t\t\t\t</Modal.Header>\r\n\t\t\t\t<form onSubmit={formik.handleSubmit}>\r\n\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t<div className=\"col-sm-12 col-lg-2\">\r\n\t\t\t\t\t\t\t\t<div className=\"avatar-upload-jsk py-2\">\r\n\t\t\t\t\t\t\t\t\t<div className=\"avatar-edit\">\r\n\t\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t\ttype=\"file\"\r\n\t\t\t\t\t\t\t\t\t\t\tname=\"image\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(event) => {\r\n\t\t\t\t\t\t\t\t\t\t\t\tformik.setFieldValue(\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"image\",\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tevent.currentTarget.files[0]\r\n\t\t\t\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"imageUpload1\"\r\n\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t<div className=\"avatar-preview-jsk\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"imageUpload1\" className=\"imageUpload\">\r\n\t\t\t\t\t\t\t\t\t\t\t{\" \"}\r\n\t\t\t\t\t\t\t\t\t\t\t<i className=\"bx bxs-cloud-upload\"></i>\r\n\t\t\t\t\t\t\t\t\t\t</label>\r\n\t\t\t\t\t\t\t\t\t\t{uploadImg ? (<div id=\"imagePreview\" style={{ backgroundImage: \"url(\" + `${api.url.image + formik.values.image}` + \")\" }}></div>):\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t<div id=\"imagePreview\" style={{ backgroundImage: \"url('https://timvieclam.xyz/images/avata-playhoder.jpg')\" }}></div>\r\n\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"col-sm-12 col-lg-10\">\r\n\t\t\t\t\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtCode\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Code Lecturer *\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"codeLec\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.codeLec && formik.errors.codeLec}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.codeLec}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<div className=\"col-6\">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t\t\t\t\t<label htmlFor=\"setSelected\"> Status</label>\r\n\t\t\t\t\t\t\t\t\t\t<Select\r\n\t\t\t\t\t\t\t\t\t\t\tid=\"setSelected\"\r\n\t\t\t\t\t\t\t\t\t\t\tonChange={(val)=> { formik.setFieldValue('statusLec',val) }}\r\n\t\t\t\t\t\t\t\t\t\t\tvalue={formik.values.statusLec}\r\n\t\t\t\t\t\t\t\t\t\t\toptions={options}\r\n\t\t\t\t\t\t\t\t\t\t\tcloseMenuOnSelect={true}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtLastName\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Last Name *\"\r\n\t\t\t\t\t\t\t\t\t\tobligatory=\"*\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"lastName\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.lastName && formik.errors.lastName}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.lastName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtFirstName\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"First Name *\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"firstName\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.firstName && formik.errors.firstName}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.firstName}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtEmail\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"email\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Email *\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"emailLec\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.emailLec && formik.errors.emailLec}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.emailLec}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtPhone\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Phone\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"phoneLec\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.phoneLec && formik.errors.phoneLec}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.phoneLec}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtAddress\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Address *\" \r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"addressLec\")}\r\n\t\t\t\t\t\t\t\t\t\terr={ formik.touched.addressLec && formik.errors.addressLec}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.addressLec}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\ttypeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"6\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtDegree\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Degree *\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"degree\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.degree && formik.errors.degree}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.degree}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\t\t\tcolumn=\"12\"\r\n\t\t\t\t\t\t\t\t\t\trows=\"2\"\r\n\t\t\t\t\t\t\t\t\t\tid=\"txtNote\"\r\n\t\t\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\t\t\tlabel=\"Note\"\r\n\t\t\t\t\t\t\t\t\t\tfrmField={formik.getFieldProps(\"noteLec\")}\r\n\t\t\t\t\t\t\t\t\t\terr={formik.touched.noteLec && formik.errors.noteLec}\r\n\t\t\t\t\t\t\t\t\t\terrMessage={formik.errors.noteLec}\r\n\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t {updateDate ? (\r\n\t\t\t\t\t\t\t\t\t\t <Fragment>\r\n\t\t\t\t\t\t\t\t\t\t <Input\r\n\t\t\t\t\t\t\t\t\t\t   typeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t   column=\"6\"\r\n\t\t\t\t\t\t\t\t\t\t   rows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t   readOnly\r\n\t\t\t\t\t\t\t\t\t\t   type=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t   label=\"Created by\"\r\n\t\t\t\t\t\t\t\t\t\t   value = {`${formik.values.createdBy} - ${new Date(formik.values.createdDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n\t\t\t\t\t\t\t\t\t\t   />\r\n\t\t\t\t\t\t\t\t\t\t   {formik.values.updatedBy != null ?(\r\n\t\t\t\t\t\t\t\t\t\t   <Fragment>\r\n\t\t\t\t\t\t\t\t\t\t\t <Input\r\n\t\t\t\t\t\t\t\t\t\t\t typeInput=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t\t column=\"6\"\r\n\t\t\t\t\t\t\t\t\t\t\t rows=\"1\"\r\n\t\t\t\t\t\t\t\t\t\t\t readOnly\r\n\t\t\t\t\t\t\t\t\t\t\t type=\"text\"\r\n\t\t\t\t\t\t\t\t\t\t\t label=\"Update by\"\r\n\t\t\t\t\t\t\t\t\t\t\t value = {`${formik.values.updatedBy} - ${new Date(formik.values.updatedDate).toLocaleDateString('vi-VI',{year: 'numeric', month: 'numeric', day: 'numeric', hour: \"2-digit\", minute: \"2-digit\"})}`}\r\n\t\t\t\t\t\t\t\t\t\t\t />\r\n\t\t\t\t\t\t\t\t\t\t   </Fragment>\r\n\t\t\t\t\t\t\t\t\t\t   ):(\"\")}\r\n\t\t\t\t\t\t\t\t\t\t </Fragment>\r\n\t\t\t\t\t\t\t\t\t ) : (\"\")}\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t\t<div className=\"row justify-content-end small\">\r\n\t\t\t\t\t\t\t<div className=\"col-auto pr-5\">\r\n\t\t\t\t\t\t\t\t<p className=\"p-0\">\r\n\t\t\t\t\t\t\t\tField required (<span className=\"text-danger\">*</span>)\r\n\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t<Button variant=\"secondary\" onClick={handleClose}>\r\n\t\t\t\t\t\t\tClose\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\r\n\t\t\t\t\t\t\tSave\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t</form>\r\n\t\t\t</Modal>\r\n\t\t</Fragment>\r\n\r\n\t);\r\n\r\n};\r\n\r\nexport default Lecturer;\r\n","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Pages\\Lecturer\\searchLecturer.jsx",["418"],"import React, { useState, useRef } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nfunction SearchLecturer(props) {\r\n  const {onSubmit} = props;\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const typingTimeoutRef = useRef(null);\r\n  function handleSearchTermChange(e) {\r\n    const value = e.target.value;\r\n    setSearchTerm(value);\r\n    \r\n    if(!onSubmit) return;\r\n\r\n    if(typingTimeoutRef.current){\r\n      clearTimeout(typingTimeoutRef.current);\r\n    };\r\n\r\n    typingTimeoutRef.current = setTimeout(()=>{\r\n      const formValues = {\r\n        searchTerm: value,\r\n      };\r\n      onSubmit(formValues);\r\n      \r\n    }, 500);\r\n    \r\n  }\r\n\r\n  return(\r\n      <form>\r\n        <input \r\n        type=\"search\" \r\n        value={searchTerm} \r\n        onChange={handleSearchTermChange} \r\n        className=\"form-control\" \r\n        placeholder=\"Search...\" />\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default SearchLecturer;","D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Containers\\Input.jsx",["419","420","421","422"],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\lecturerService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Services\\userService.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\actions.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\store.js",[],"D:\\Intership ISC\\ISC-Trainees-Management\\ReactJS-Dungdq\\src\\Store\\reducers\\auth.js",[],{"ruleId":"423","severity":1,"message":"424","line":8,"column":9,"nodeType":"425","messageId":"426","endLine":8,"endColumn":22},{"ruleId":"423","severity":1,"message":"427","line":2,"column":8,"nodeType":"425","messageId":"426","endLine":2,"endColumn":14},{"ruleId":"423","severity":1,"message":"428","line":8,"column":21,"nodeType":"425","messageId":"426","endLine":8,"endColumn":33},{"ruleId":"423","severity":1,"message":"429","line":9,"column":17,"nodeType":"425","messageId":"426","endLine":9,"endColumn":25},{"ruleId":"430","replacedBy":"431"},{"ruleId":"432","replacedBy":"433"},{"ruleId":"434","severity":1,"message":"435","line":69,"column":17,"nodeType":"436","endLine":69,"endColumn":47},{"ruleId":"434","severity":1,"message":"437","line":74,"column":13,"nodeType":"436","endLine":74,"endColumn":57},{"ruleId":"434","severity":1,"message":"437","line":90,"column":13,"nodeType":"436","endLine":90,"endColumn":58},{"ruleId":"434","severity":1,"message":"437","line":102,"column":13,"nodeType":"436","endLine":102,"endColumn":58},{"ruleId":"434","severity":1,"message":"437","line":118,"column":13,"nodeType":"436","endLine":118,"endColumn":58},{"ruleId":"434","severity":1,"message":"435","line":132,"column":13,"nodeType":"436","endLine":132,"endColumn":92},{"ruleId":"434","severity":1,"message":"435","line":149,"column":9,"nodeType":"436","endLine":149,"endColumn":47},{"ruleId":"434","severity":1,"message":"437","line":151,"column":9,"nodeType":"436","endLine":151,"endColumn":82},{"ruleId":"423","severity":1,"message":"438","line":2,"column":13,"nodeType":"425","messageId":"426","endLine":2,"endColumn":16},{"ruleId":"423","severity":1,"message":"439","line":5,"column":10,"nodeType":"425","messageId":"426","endLine":5,"endColumn":14},{"ruleId":"423","severity":1,"message":"440","line":18,"column":8,"nodeType":"425","messageId":"426","endLine":18,"endColumn":29},{"ruleId":"423","severity":1,"message":"441","line":26,"column":9,"nodeType":"425","messageId":"426","endLine":26,"endColumn":13},{"ruleId":"423","severity":1,"message":"442","line":27,"column":9,"nodeType":"425","messageId":"426","endLine":27,"endColumn":14},{"ruleId":"423","severity":1,"message":"443","line":29,"column":10,"nodeType":"425","messageId":"426","endLine":29,"endColumn":23},{"ruleId":"423","severity":1,"message":"444","line":30,"column":10,"nodeType":"425","messageId":"426","endLine":30,"endColumn":21},{"ruleId":"423","severity":1,"message":"445","line":30,"column":23,"nodeType":"425","messageId":"426","endLine":30,"endColumn":37},{"ruleId":"423","severity":1,"message":"446","line":31,"column":10,"nodeType":"425","messageId":"426","endLine":31,"endColumn":18},{"ruleId":"423","severity":1,"message":"447","line":31,"column":20,"nodeType":"425","messageId":"426","endLine":31,"endColumn":31},{"ruleId":"423","severity":1,"message":"448","line":32,"column":10,"nodeType":"425","messageId":"426","endLine":32,"endColumn":17},{"ruleId":"423","severity":1,"message":"449","line":32,"column":19,"nodeType":"425","messageId":"426","endLine":32,"endColumn":29},{"ruleId":"423","severity":1,"message":"450","line":33,"column":10,"nodeType":"425","messageId":"426","endLine":33,"endColumn":19},{"ruleId":"423","severity":1,"message":"451","line":33,"column":21,"nodeType":"425","messageId":"426","endLine":33,"endColumn":33},{"ruleId":"423","severity":1,"message":"452","line":34,"column":9,"nodeType":"425","messageId":"426","endLine":34,"endColumn":19},{"ruleId":"423","severity":1,"message":"453","line":38,"column":10,"nodeType":"425","messageId":"426","endLine":38,"endColumn":19},{"ruleId":"423","severity":1,"message":"454","line":39,"column":9,"nodeType":"425","messageId":"426","endLine":39,"endColumn":22},{"ruleId":"423","severity":1,"message":"455","line":50,"column":27,"nodeType":"425","messageId":"426","endLine":50,"endColumn":45},{"ruleId":"423","severity":1,"message":"456","line":60,"column":10,"nodeType":"425","messageId":"426","endLine":60,"endColumn":24},{"ruleId":"423","severity":1,"message":"457","line":60,"column":26,"nodeType":"425","messageId":"426","endLine":60,"endColumn":43},{"ruleId":"423","severity":1,"message":"458","line":64,"column":10,"nodeType":"425","messageId":"426","endLine":64,"endColumn":25},{"ruleId":"423","severity":1,"message":"459","line":64,"column":27,"nodeType":"425","messageId":"426","endLine":64,"endColumn":45},{"ruleId":"423","severity":1,"message":"460","line":65,"column":10,"nodeType":"425","messageId":"426","endLine":65,"endColumn":19},{"ruleId":"423","severity":1,"message":"461","line":76,"column":33,"nodeType":"425","messageId":"426","endLine":76,"endColumn":57},{"ruleId":"462","severity":1,"message":"463","line":79,"column":12,"nodeType":"425","messageId":"464","endLine":79,"endColumn":13},{"ruleId":"423","severity":1,"message":"465","line":88,"column":10,"nodeType":"425","messageId":"426","endLine":88,"endColumn":25},{"ruleId":"423","severity":1,"message":"466","line":88,"column":27,"nodeType":"425","messageId":"426","endLine":88,"endColumn":45},{"ruleId":"423","severity":1,"message":"467","line":89,"column":10,"nodeType":"425","messageId":"426","endLine":89,"endColumn":21},{"ruleId":"468","severity":1,"message":"469","line":240,"column":6,"nodeType":"470","endLine":240,"endColumn":15,"suggestions":"471"},{"ruleId":"472","severity":1,"message":"473","line":264,"column":48,"nodeType":"474","messageId":"475","endLine":264,"endColumn":50},{"ruleId":"472","severity":1,"message":"473","line":266,"column":33,"nodeType":"474","messageId":"475","endLine":266,"endColumn":35},{"ruleId":"472","severity":1,"message":"473","line":358,"column":29,"nodeType":"474","messageId":"475","endLine":358,"endColumn":31},{"ruleId":"472","severity":1,"message":"473","line":361,"column":28,"nodeType":"474","messageId":"475","endLine":361,"endColumn":30},{"ruleId":"472","severity":1,"message":"473","line":364,"column":28,"nodeType":"474","messageId":"475","endLine":364,"endColumn":30},{"ruleId":"434","severity":1,"message":"435","line":460,"column":21,"nodeType":"436","endLine":460,"endColumn":52},{"ruleId":"476","severity":1,"message":"477","line":460,"column":29,"nodeType":"478","messageId":"479","endLine":460,"endColumn":51},{"ruleId":"472","severity":1,"message":"473","line":508,"column":42,"nodeType":"474","messageId":"475","endLine":508,"endColumn":44},{"ruleId":"434","severity":1,"message":"435","line":517,"column":35,"nodeType":"436","endLine":517,"endColumn":105},{"ruleId":"476","severity":1,"message":"477","line":517,"column":43,"nodeType":"478","messageId":"479","endLine":517,"endColumn":65},{"ruleId":"480","severity":1,"message":"481","line":530,"column":35,"nodeType":"482","messageId":"483","endLine":537,"endColumn":36},{"ruleId":"434","severity":1,"message":"435","line":541,"column":33,"nodeType":"436","endLine":541,"endColumn":141},{"ruleId":"476","severity":1,"message":"477","line":541,"column":41,"nodeType":"478","messageId":"479","endLine":541,"endColumn":62},{"ruleId":"434","severity":1,"message":"435","line":542,"column":33,"nodeType":"436","endLine":542,"endColumn":140},{"ruleId":"476","severity":1,"message":"477","line":542,"column":41,"nodeType":"478","messageId":"479","endLine":542,"endColumn":62},{"ruleId":"484","severity":1,"message":"485","line":24,"column":5,"nodeType":"486","messageId":"475","endLine":24,"endColumn":18},{"ruleId":"480","severity":1,"message":"481","line":33,"column":17,"nodeType":"482","messageId":"483","endLine":105,"endColumn":18},{"ruleId":"472","severity":1,"message":"473","line":39,"column":43,"nodeType":"474","messageId":"475","endLine":39,"endColumn":45},{"ruleId":"487","severity":1,"message":"488","line":66,"column":19,"nodeType":"489","messageId":"490","endLine":66,"endColumn":25},{"ruleId":"472","severity":1,"message":"473","line":76,"column":45,"nodeType":"474","messageId":"475","endLine":76,"endColumn":47},{"ruleId":"487","severity":1,"message":"488","line":104,"column":19,"nodeType":"489","messageId":"490","endLine":104,"endColumn":25},{"ruleId":"472","severity":1,"message":"473","line":27,"column":15,"nodeType":"474","messageId":"475","endLine":27,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":29,"column":11,"nodeType":"436","endLine":29,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":29,"column":41,"nodeType":"478","messageId":"479","endLine":29,"endColumn":63},{"ruleId":"434","severity":1,"message":"435","line":35,"column":11,"nodeType":"436","endLine":35,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":35,"column":41,"nodeType":"478","messageId":"479","endLine":35,"endColumn":63},{"ruleId":"472","severity":1,"message":"473","line":43,"column":15,"nodeType":"474","messageId":"475","endLine":43,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":45,"column":11,"nodeType":"436","endLine":45,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":45,"column":41,"nodeType":"478","messageId":"479","endLine":45,"endColumn":63},{"ruleId":"434","severity":1,"message":"435","line":51,"column":13,"nodeType":"436","endLine":51,"endColumn":105},{"ruleId":"476","severity":1,"message":"477","line":51,"column":43,"nodeType":"478","messageId":"479","endLine":51,"endColumn":65},{"ruleId":"423","severity":1,"message":"491","line":4,"column":59,"nodeType":"425","messageId":"426","endLine":4,"endColumn":66},{"ruleId":"423","severity":1,"message":"492","line":9,"column":22,"nodeType":"425","messageId":"426","endLine":9,"endColumn":36},{"ruleId":"423","severity":1,"message":"493","line":24,"column":32,"nodeType":"425","messageId":"426","endLine":24,"endColumn":55},{"ruleId":"423","severity":1,"message":"494","line":65,"column":13,"nodeType":"425","messageId":"426","endLine":65,"endColumn":21},{"ruleId":"468","severity":1,"message":"469","line":138,"column":6,"nodeType":"470","endLine":138,"endColumn":15,"suggestions":"495"},{"ruleId":"434","severity":1,"message":"435","line":258,"column":21,"nodeType":"436","endLine":258,"endColumn":52},{"ruleId":"476","severity":1,"message":"477","line":258,"column":29,"nodeType":"478","messageId":"479","endLine":258,"endColumn":51},{"ruleId":"472","severity":1,"message":"473","line":308,"column":38,"nodeType":"474","messageId":"475","endLine":308,"endColumn":40},{"ruleId":"434","severity":1,"message":"435","line":333,"column":33,"nodeType":"436","endLine":335,"endColumn":65},{"ruleId":"476","severity":1,"message":"477","line":333,"column":41,"nodeType":"478","messageId":"479","endLine":333,"endColumn":62},{"ruleId":"434","severity":1,"message":"435","line":339,"column":35,"nodeType":"436","endLine":343,"endColumn":60},{"ruleId":"476","severity":1,"message":"477","line":339,"column":44,"nodeType":"478","messageId":"479","endLine":339,"endColumn":65},{"ruleId":"423","severity":1,"message":"496","line":2,"column":8,"nodeType":"425","messageId":"426","endLine":2,"endColumn":9},{"ruleId":"423","severity":1,"message":"438","line":2,"column":13,"nodeType":"425","messageId":"426","endLine":2,"endColumn":16},{"ruleId":"423","severity":1,"message":"439","line":5,"column":10,"nodeType":"425","messageId":"426","endLine":5,"endColumn":14},{"ruleId":"423","severity":1,"message":"497","line":7,"column":8,"nodeType":"425","messageId":"426","endLine":7,"endColumn":19},{"ruleId":"423","severity":1,"message":"498","line":11,"column":8,"nodeType":"425","messageId":"426","endLine":11,"endColumn":14},{"ruleId":"468","severity":1,"message":"469","line":108,"column":6,"nodeType":"470","endLine":108,"endColumn":15,"suggestions":"499"},{"ruleId":"423","severity":1,"message":"500","line":150,"column":9,"nodeType":"425","messageId":"426","endLine":150,"endColumn":26},{"ruleId":"434","severity":1,"message":"435","line":232,"column":21,"nodeType":"436","endLine":232,"endColumn":52},{"ruleId":"476","severity":1,"message":"477","line":232,"column":29,"nodeType":"478","messageId":"479","endLine":232,"endColumn":51},{"ruleId":"472","severity":1,"message":"473","line":283,"column":37,"nodeType":"474","messageId":"475","endLine":283,"endColumn":39},{"ruleId":"434","severity":1,"message":"435","line":296,"column":33,"nodeType":"436","endLine":299,"endColumn":34},{"ruleId":"476","severity":1,"message":"477","line":297,"column":40,"nodeType":"478","messageId":"479","endLine":297,"endColumn":62},{"ruleId":"434","severity":1,"message":"435","line":307,"column":33,"nodeType":"436","endLine":311,"endColumn":34},{"ruleId":"476","severity":1,"message":"477","line":308,"column":40,"nodeType":"478","messageId":"479","endLine":308,"endColumn":61},{"ruleId":"434","severity":1,"message":"435","line":314,"column":33,"nodeType":"436","endLine":320,"endColumn":34},{"ruleId":"476","severity":1,"message":"477","line":315,"column":40,"nodeType":"478","messageId":"479","endLine":315,"endColumn":61},{"ruleId":"472","severity":1,"message":"473","line":29,"column":15,"nodeType":"474","messageId":"475","endLine":29,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":31,"column":13,"nodeType":"436","endLine":35,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":33,"column":20,"nodeType":"478","messageId":"479","endLine":33,"endColumn":42},{"ruleId":"434","severity":1,"message":"435","line":41,"column":13,"nodeType":"436","endLine":45,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":43,"column":20,"nodeType":"478","messageId":"479","endLine":43,"endColumn":42},{"ruleId":"472","severity":1,"message":"473","line":55,"column":15,"nodeType":"474","messageId":"475","endLine":55,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":57,"column":13,"nodeType":"436","endLine":61,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":59,"column":20,"nodeType":"478","messageId":"479","endLine":59,"endColumn":42},{"ruleId":"434","severity":1,"message":"435","line":67,"column":13,"nodeType":"436","endLine":71,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":69,"column":20,"nodeType":"478","messageId":"479","endLine":69,"endColumn":42},{"ruleId":"472","severity":1,"message":"473","line":29,"column":15,"nodeType":"474","messageId":"475","endLine":29,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":31,"column":13,"nodeType":"436","endLine":35,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":33,"column":20,"nodeType":"478","messageId":"479","endLine":33,"endColumn":42},{"ruleId":"434","severity":1,"message":"435","line":41,"column":13,"nodeType":"436","endLine":45,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":43,"column":20,"nodeType":"478","messageId":"479","endLine":43,"endColumn":42},{"ruleId":"472","severity":1,"message":"473","line":55,"column":15,"nodeType":"474","messageId":"475","endLine":55,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":57,"column":13,"nodeType":"436","endLine":61,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":59,"column":20,"nodeType":"478","messageId":"479","endLine":59,"endColumn":42},{"ruleId":"434","severity":1,"message":"435","line":67,"column":13,"nodeType":"436","endLine":71,"endColumn":14},{"ruleId":"476","severity":1,"message":"477","line":69,"column":20,"nodeType":"478","messageId":"479","endLine":69,"endColumn":42},{"ruleId":"423","severity":1,"message":"501","line":11,"column":8,"nodeType":"425","messageId":"426","endLine":11,"endColumn":14},{"ruleId":"468","severity":1,"message":"469","line":191,"column":6,"nodeType":"470","endLine":191,"endColumn":15,"suggestions":"502"},{"ruleId":"434","severity":1,"message":"435","line":201,"column":19,"nodeType":"436","endLine":201,"endColumn":31},{"ruleId":"434","severity":1,"message":"435","line":261,"column":29,"nodeType":"436","endLine":261,"endColumn":80},{"ruleId":"434","severity":1,"message":"435","line":268,"column":29,"nodeType":"436","endLine":272,"endColumn":30},{"ruleId":"434","severity":1,"message":"435","line":275,"column":29,"nodeType":"436","endLine":279,"endColumn":30},{"ruleId":"423","severity":1,"message":"501","line":10,"column":8,"nodeType":"425","messageId":"426","endLine":10,"endColumn":14},{"ruleId":"468","severity":1,"message":"469","line":177,"column":6,"nodeType":"470","endLine":177,"endColumn":15,"suggestions":"503"},{"ruleId":"434","severity":1,"message":"435","line":187,"column":19,"nodeType":"436","endLine":187,"endColumn":31},{"ruleId":"434","severity":1,"message":"435","line":251,"column":29,"nodeType":"436","endLine":251,"endColumn":80},{"ruleId":"434","severity":1,"message":"435","line":265,"column":29,"nodeType":"436","endLine":269,"endColumn":30},{"ruleId":"434","severity":1,"message":"435","line":272,"column":29,"nodeType":"436","endLine":276,"endColumn":30},{"ruleId":"468","severity":1,"message":"469","line":178,"column":6,"nodeType":"470","endLine":178,"endColumn":15,"suggestions":"504"},{"ruleId":"434","severity":1,"message":"435","line":188,"column":19,"nodeType":"436","endLine":188,"endColumn":31},{"ruleId":"434","severity":1,"message":"435","line":249,"column":29,"nodeType":"436","endLine":249,"endColumn":80},{"ruleId":"434","severity":1,"message":"435","line":261,"column":29,"nodeType":"436","endLine":265,"endColumn":30},{"ruleId":"434","severity":1,"message":"435","line":268,"column":29,"nodeType":"436","endLine":272,"endColumn":30},{"ruleId":"472","severity":1,"message":"473","line":341,"column":65,"nodeType":"474","messageId":"475","endLine":341,"endColumn":67},{"ruleId":"472","severity":1,"message":"473","line":384,"column":53,"nodeType":"474","messageId":"475","endLine":384,"endColumn":55},{"ruleId":"434","severity":1,"message":"435","line":21,"column":11,"nodeType":"436","endLine":21,"endColumn":108},{"ruleId":"476","severity":1,"message":"477","line":21,"column":41,"nodeType":"478","messageId":"479","endLine":21,"endColumn":63},{"ruleId":"434","severity":1,"message":"435","line":27,"column":11,"nodeType":"436","endLine":27,"endColumn":108},{"ruleId":"476","severity":1,"message":"477","line":27,"column":41,"nodeType":"478","messageId":"479","endLine":27,"endColumn":63},{"ruleId":"472","severity":1,"message":"473","line":36,"column":24,"nodeType":"474","messageId":"475","endLine":36,"endColumn":26},{"ruleId":"434","severity":1,"message":"435","line":38,"column":21,"nodeType":"436","endLine":38,"endColumn":74},{"ruleId":"476","severity":1,"message":"477","line":38,"column":51,"nodeType":"478","messageId":"479","endLine":38,"endColumn":73},{"ruleId":"434","severity":1,"message":"435","line":42,"column":21,"nodeType":"436","endLine":42,"endColumn":74},{"ruleId":"476","severity":1,"message":"477","line":42,"column":51,"nodeType":"478","messageId":"479","endLine":42,"endColumn":73},{"ruleId":"434","severity":1,"message":"435","line":51,"column":13,"nodeType":"436","endLine":51,"endColumn":110},{"ruleId":"476","severity":1,"message":"477","line":51,"column":43,"nodeType":"478","messageId":"479","endLine":51,"endColumn":65},{"ruleId":"434","severity":1,"message":"435","line":57,"column":13,"nodeType":"436","endLine":57,"endColumn":110},{"ruleId":"476","severity":1,"message":"477","line":57,"column":43,"nodeType":"478","messageId":"479","endLine":57,"endColumn":65},{"ruleId":"480","severity":1,"message":"481","line":32,"column":11,"nodeType":"482","messageId":"483","endLine":106,"endColumn":12},{"ruleId":"472","severity":1,"message":"473","line":38,"column":37,"nodeType":"474","messageId":"475","endLine":38,"endColumn":39},{"ruleId":"487","severity":1,"message":"488","line":66,"column":15,"nodeType":"489","messageId":"490","endLine":66,"endColumn":21},{"ruleId":"472","severity":1,"message":"473","line":76,"column":39,"nodeType":"474","messageId":"475","endLine":76,"endColumn":41},{"ruleId":"487","severity":1,"message":"488","line":105,"column":15,"nodeType":"489","messageId":"490","endLine":105,"endColumn":21},{"ruleId":"505","severity":1,"message":"506","line":110,"column":5,"nodeType":"507","messageId":"508","endLine":140,"endColumn":6},{"ruleId":"487","severity":1,"message":"488","line":110,"column":5,"nodeType":"507","messageId":"490","endLine":140,"endColumn":6},{"ruleId":"423","severity":1,"message":"509","line":14,"column":9,"nodeType":"425","messageId":"426","endLine":14,"endColumn":17},{"ruleId":"423","severity":1,"message":"510","line":34,"column":10,"nodeType":"425","messageId":"426","endLine":34,"endColumn":19},{"ruleId":"472","severity":1,"message":"473","line":127,"column":34,"nodeType":"474","messageId":"475","endLine":127,"endColumn":36},{"ruleId":"472","severity":1,"message":"473","line":127,"column":65,"nodeType":"474","messageId":"475","endLine":127,"endColumn":67},{"ruleId":"423","severity":1,"message":"511","line":132,"column":15,"nodeType":"425","messageId":"426","endLine":132,"endColumn":24},{"ruleId":"423","severity":1,"message":"512","line":145,"column":13,"nodeType":"425","messageId":"426","endLine":145,"endColumn":20},{"ruleId":"468","severity":1,"message":"469","line":174,"column":5,"nodeType":"470","endLine":174,"endColumn":28,"suggestions":"513"},{"ruleId":"434","severity":1,"message":"435","line":184,"column":51,"nodeType":"436","endLine":184,"endColumn":63},{"ruleId":"514","severity":1,"message":"515","line":247,"column":29,"nodeType":"436","endLine":247,"endColumn":80},{"ruleId":"434","severity":1,"message":"435","line":247,"column":29,"nodeType":"436","endLine":247,"endColumn":80},{"ruleId":"434","severity":1,"message":"435","line":262,"column":27,"nodeType":"436","endLine":262,"endColumn":116},{"ruleId":"434","severity":1,"message":"435","line":263,"column":27,"nodeType":"436","endLine":263,"endColumn":104},{"ruleId":"472","severity":1,"message":"473","line":272,"column":40,"nodeType":"474","messageId":"475","endLine":272,"endColumn":42},{"ruleId":"472","severity":1,"message":"473","line":27,"column":15,"nodeType":"474","messageId":"475","endLine":27,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":29,"column":11,"nodeType":"436","endLine":29,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":29,"column":41,"nodeType":"478","messageId":"479","endLine":29,"endColumn":63},{"ruleId":"434","severity":1,"message":"435","line":35,"column":11,"nodeType":"436","endLine":35,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":35,"column":41,"nodeType":"478","messageId":"479","endLine":35,"endColumn":63},{"ruleId":"472","severity":1,"message":"473","line":43,"column":15,"nodeType":"474","messageId":"475","endLine":43,"endColumn":17},{"ruleId":"434","severity":1,"message":"435","line":45,"column":11,"nodeType":"436","endLine":45,"endColumn":103},{"ruleId":"476","severity":1,"message":"477","line":45,"column":41,"nodeType":"478","messageId":"479","endLine":45,"endColumn":63},{"ruleId":"434","severity":1,"message":"435","line":51,"column":13,"nodeType":"436","endLine":51,"endColumn":105},{"ruleId":"476","severity":1,"message":"477","line":51,"column":43,"nodeType":"478","messageId":"479","endLine":51,"endColumn":65},{"ruleId":"423","severity":1,"message":"516","line":13,"column":10,"nodeType":"425","messageId":"426","endLine":13,"endColumn":20},{"ruleId":"434","severity":1,"message":"435","line":74,"column":51,"nodeType":"436","endLine":74,"endColumn":82},{"ruleId":"476","severity":1,"message":"477","line":74,"column":59,"nodeType":"478","messageId":"479","endLine":74,"endColumn":81},{"ruleId":"434","severity":1,"message":"435","line":174,"column":23,"nodeType":"436","endLine":174,"endColumn":57},{"ruleId":"434","severity":1,"message":"435","line":176,"column":19,"nodeType":"436","endLine":176,"endColumn":64},{"ruleId":"434","severity":1,"message":"435","line":369,"column":29,"nodeType":"436","endLine":369,"endColumn":99},{"ruleId":"476","severity":1,"message":"477","line":369,"column":37,"nodeType":"478","messageId":"479","endLine":369,"endColumn":59},{"ruleId":"423","severity":1,"message":"517","line":1,"column":27,"nodeType":"425","messageId":"426","endLine":1,"endColumn":33},{"ruleId":"468","severity":1,"message":"469","line":54,"column":5,"nodeType":"470","endLine":54,"endColumn":14,"suggestions":"518"},{"ruleId":"423","severity":1,"message":"519","line":61,"column":8,"nodeType":"425","messageId":"426","endLine":61,"endColumn":24},{"ruleId":"472","severity":1,"message":"473","line":182,"column":22,"nodeType":"474","messageId":"475","endLine":182,"endColumn":24},{"ruleId":"472","severity":1,"message":"473","line":185,"column":21,"nodeType":"474","messageId":"475","endLine":185,"endColumn":23},{"ruleId":"472","severity":1,"message":"473","line":243,"column":22,"nodeType":"474","messageId":"475","endLine":243,"endColumn":24},{"ruleId":"472","severity":1,"message":"473","line":246,"column":21,"nodeType":"474","messageId":"475","endLine":246,"endColumn":23},{"ruleId":"434","severity":1,"message":"435","line":304,"column":10,"nodeType":"436","endLine":304,"endColumn":22},{"ruleId":"472","severity":1,"message":"473","line":360,"column":31,"nodeType":"474","messageId":"475","endLine":360,"endColumn":33},{"ruleId":"434","severity":1,"message":"435","line":369,"column":18,"nodeType":"436","endLine":369,"endColumn":88},{"ruleId":"476","severity":1,"message":"477","line":369,"column":26,"nodeType":"478","messageId":"479","endLine":369,"endColumn":48},{"ruleId":"434","severity":1,"message":"437","line":386,"column":15,"nodeType":"436","endLine":390,"endColumn":16},{"ruleId":"434","severity":1,"message":"437","line":393,"column":15,"nodeType":"436","endLine":397,"endColumn":16},{"ruleId":"520","severity":1,"message":"521","line":449,"column":81,"nodeType":"474","messageId":"522","endLine":449,"endColumn":82},{"ruleId":"520","severity":1,"message":"521","line":449,"column":124,"nodeType":"474","messageId":"522","endLine":449,"endColumn":125},{"ruleId":"423","severity":1,"message":"523","line":2,"column":8,"nodeType":"425","messageId":"426","endLine":2,"endColumn":17},{"ruleId":"423","severity":1,"message":"523","line":2,"column":8,"nodeType":"425","messageId":"426","endLine":2,"endColumn":17},{"ruleId":"423","severity":1,"message":"524","line":6,"column":78,"nodeType":"425","messageId":"426","endLine":6,"endColumn":90},{"ruleId":"423","severity":1,"message":"525","line":8,"column":15,"nodeType":"425","messageId":"426","endLine":8,"endColumn":24},{"ruleId":"423","severity":1,"message":"526","line":9,"column":15,"nodeType":"425","messageId":"426","endLine":9,"endColumn":24},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","'Footer' is defined but never used.","'setCollapsed' is assigned a value but never used.","'setImage' is assigned a value but never used.","no-native-reassign",["527"],"no-negated-in-lhs",["528"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'map' is defined but never used.","'Link' is defined but never used.","'studentCompanyService' is defined but never used.","'test' is assigned a value but never used.","'test2' is assigned a value but never used.","'selectedFiles' is assigned a value but never used.","'currentFile' is assigned a value but never used.","'setCurrentFile' is assigned a value but never used.","'progress' is assigned a value but never used.","'setProgress' is assigned a value but never used.","'message' is assigned a value but never used.","'setMessage' is assigned a value but never used.","'fileInfos' is assigned a value but never used.","'setFileInfos' is assigned a value but never used.","'selectFile' is assigned a value but never used.","'oneUniver' is assigned a value but never used.","'showOneUniver' is assigned a value but never used.","'setSelectedTypeStu' is assigned a value but never used.","'selectedUniver' is assigned a value but never used.","'setSelectedUniver' is assigned a value but never used.","'selectedCompany' is assigned a value but never used.","'setSelectedCompany' is assigned a value but never used.","'companies' is assigned a value but never used.","'setSelectedWorkingStatus' is assigned a value but never used.","no-redeclare","'i' is already defined.","redeclared","'studentIntakeId' is assigned a value but never used.","'setStudentIntakeId' is assigned a value but never used.","'showIntakes' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'loadData'. Either include it or remove the dependency array.","ArrayExpression",["529"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-script-url","Script URL is a form of eval.","Literal","unexpectedScriptURL","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-dupe-keys","Duplicate key 'searchStudent'.","ObjectExpression","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'FaHeart' is defined but never used.","'registerLocale' is defined but never used.","'setSelectedIntakeStatus' is assigned a value but never used.","'newValue' is assigned a value but never used.",["530"],"'$' is defined but never used.","'MultiSelect' is defined but never used.","'Select' is defined but never used.",["531"],"'handleDeleteMajor' is assigned a value but never used.","'moment' is defined but never used.",["532"],["533"],["534"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'childRef' is assigned a value but never used.","'subjectId' is assigned a value but never used.","'totalPage' is assigned a value but never used.","'keyword' is assigned a value but never used.",["535"],"jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'listIntake' is assigned a value but never used.","'useRef' is defined but never used.",["536"],"'selectedValueLec' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'PropTypes' is defined but never used.","'errorMessage' is assigned a value but never used.","'classLeft' is assigned a value but never used.","'clasRight' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"537","fix":"538"},{"desc":"537","fix":"539"},{"desc":"537","fix":"540"},{"desc":"537","fix":"541"},{"desc":"537","fix":"542"},{"desc":"537","fix":"543"},{"desc":"544","fix":"545"},{"desc":"537","fix":"546"},"Update the dependencies array to be: [filters, loadData]",{"range":"547","text":"548"},{"range":"549","text":"548"},{"range":"550","text":"548"},{"range":"551","text":"548"},{"range":"552","text":"548"},{"range":"553","text":"548"},"Update the dependencies array to be: [filters, loadData, searchSubject]",{"range":"554","text":"555"},{"range":"556","text":"548"},[7669,7678],"[filters, loadData]",[4113,4122],[3077,3086],[5274,5283],[4867,4876],[4976,4985],[5180,5203],"[filters, loadData, searchSubject]",[1731,1740]]